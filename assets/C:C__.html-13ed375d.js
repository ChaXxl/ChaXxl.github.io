import{_ as l,X as o,Y as d,Z as a,$ as n,a0 as s,a1 as t,a2 as p,F as c}from"./framework-c5cbeb87.js";const r={},u=a("h1",{id:"c-c",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#c-c","aria-hidden":"true"},"#"),n(" C/C++")],-1),k=a("h1",{id:"c-编程习惯与编程要点",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#c-编程习惯与编程要点","aria-hidden":"true"},"#"),n(" C++编程习惯与编程要点")],-1),h={href:"https://mp.weixin.qq.com/s/eFFc74OpA1ca2LlCB94Siw",target:"_blank",rel:"noopener noreferrer"},v=p(`<h2 id="代码注释" tabindex="-1"><a class="header-anchor" href="#代码注释" aria-hidden="true">#</a> 代码注释</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/**
 *  每一行都用一个*开始
 *  写好注释
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>/* */ 不能嵌套使用</p><br><h2 id="腾讯代码安全指南" tabindex="-1"><a class="header-anchor" href="#腾讯代码安全指南" aria-hidden="true">#</a> 腾讯代码安全指南</h2>`,5),m={href:"https://github.com/Tencent/secguide",target:"_blank",rel:"noopener noreferrer"},b=p(`<img src="https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruyS5CyyJutW7LMuQk5q5CnR85h5AvG6fywMAPwppYAgJOq7srjPqibtGu5I9wPz8KGs6rkeCcgyxKw/640?wx_fmt=png&amp;wxfrom=13&amp;wx_lazy=1&amp;wx_co=1&amp;tp=wxpic" style="zoom:67%;"><br><h1 id="零散笔记" tabindex="-1"><a class="header-anchor" href="#零散笔记" aria-hidden="true">#</a> 零散笔记</h1><h2 id="字符转数字" tabindex="-1"><a class="header-anchor" href="#字符转数字" aria-hidden="true">#</a> 字符转数字</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token function">atof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 转成浮点型</span>

<span class="token function">atoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 转成int型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="纯字符串-去掉转义" tabindex="-1"><a class="header-anchor" href="#纯字符串-去掉转义" aria-hidden="true">#</a> 纯字符串，去掉转义</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>string str <span class="token operator">=</span> <span class="token raw-string string">R&quot;(aaaa\\t\\nbbbb)&quot;</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>	<span class="token comment">// aaaa\\t\\nbbbb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="常量指针和指针常量" tabindex="-1"><a class="header-anchor" href="#常量指针和指针常量" aria-hidden="true">#</a> 常量指针和指针常量</h2><ol><li><p>常量指针</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>指针指向的内容是常量</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><br><ol start="2"><li><p>指针常量</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>指针是个常量</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br></li></ol><h2 id="自增和自减" tabindex="-1"><a class="header-anchor" href="#自增和自减" aria-hidden="true">#</a> 自增和自减</h2><h3 id="i" tabindex="-1"><a class="header-anchor" href="#i" aria-hidden="true">#</a> i++</h3><p>先运算，再自增</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>x <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token comment">//先让x变成i的值1，再让i加1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="i-1" tabindex="-1"><a class="header-anchor" href="#i-1" aria-hidden="true">#</a> ++i</h3><p>先自增，再运算</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>x <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>   <span class="token comment">//先让i加1, 再让x变成i的值1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="睡眠" tabindex="-1"><a class="header-anchor" href="#睡眠" aria-hidden="true">#</a> 睡眠</h2><p>Windows下</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windos.h&gt;</span></span>
<span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 单位：毫秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><p>Linux下</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 单位：秒</span>
<span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 单位：微秒	</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>通用：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>
this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="静态链表" tabindex="-1"><a class="header-anchor" href="#静态链表" aria-hidden="true">#</a> 静态链表</h2><p>定义<kbd>用数组来描述链表叫做静态链表</kbd></p>`,33),g=p(`<table><thead><tr><th style="text-align:center;">游标</th><th style="text-align:center;">5</th><th style="text-align:center;">2</th><th style="text-align:center;">3</th><th style="text-align:center;">4</th><th style="text-align:center;">5</th><th style="text-align:center;">6</th><th style="text-align:center;">7</th><th style="text-align:center;">...</th><th style="text-align:center;">1</th></tr></thead><tbody><tr><td style="text-align:center;">数据</td><td style="text-align:center;"></td><td style="text-align:center;">A</td><td style="text-align:center;">C</td><td style="text-align:center;">D</td><td style="text-align:center;">E</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">...</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">下标</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td><td style="text-align:center;">6</td><td style="text-align:center;">...</td><td style="text-align:center;">999</td></tr></tbody></table><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">100</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	string data<span class="token punctuation">;</span> <span class="token comment">//数据</span>
	<span class="token keyword">int</span> cur<span class="token punctuation">;</span> <span class="token comment">//游标Cursor</span>
<span class="token punctuation">}</span>StaticLinkList<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>则对链表进行初始化相当于初始化数组：</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>StaticLinkList s <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token comment">//最后一个元素的cursor指向0</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
	cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	i <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="获取链表长度" tabindex="-1"><a class="header-anchor" href="#获取链表长度" aria-hidden="true">#</a> 获取链表长度</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span>StaticLinkList s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">do</span> <span class="token punctuation">{</span>
		i <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
		count<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="静态链表的插入操作" tabindex="-1"><a class="header-anchor" href="#静态链表的插入操作" aria-hidden="true">#</a> 静态链表的插入操作</h3><p>比如要把B插入A的后面，则</p>`,10),f=p(`<p><img src="https://i.loli.net/2021/06/26/E1BfxFT3NRshIzg.png#pic_center" alt="静态链表插入数据" loading="lazy"></p><br><h3 id="静态链表的删除操作" tabindex="-1"><a class="header-anchor" href="#静态链表的删除操作" aria-hidden="true">#</a> 静态链表的删除操作</h3><p>把要插入位置的前一个cursor指向下标为插入位置的cursor即可</p><br><h3 id="实操案例" tabindex="-1"><a class="header-anchor" href="#实操案例" aria-hidden="true">#</a> 实操案例</h3><p>写一个完整的程序，实现随机生成20个元素的链表（尾插法、头插法任意），用快速查找法快速查找中间节点的值并显示</p><p>快速查找法：利用快慢指针原理：</p><p>设置连个节点<code>*serch、*mid</code>，都指向单链表的头节点，其中<code>*serch</code>的移动速度是<code>*min</code>的2倍。当<code>*search</code>指向末尾节点的时候，min就正好在中间了，这也是标尺的思想。</p><p><img src="https://i.loli.net/2021/06/26/iOMRjJK8hbVFGsl.png" alt="image-20210626221152454" loading="lazy"></p><h1 id="stl" tabindex="-1"><a class="header-anchor" href="#stl" aria-hidden="true">#</a> STL</h1><h2 id="容器" tabindex="-1"><a class="header-anchor" href="#容器" aria-hidden="true">#</a> 容器</h2><h3 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> array</h3><br><h3 id="bitset" tabindex="-1"><a class="header-anchor" href="#bitset" aria-hidden="true">#</a> bitset</h3><br><h3 id="deque" tabindex="-1"><a class="header-anchor" href="#deque" aria-hidden="true">#</a> deque</h3><br><h3 id="forward-list" tabindex="-1"><a class="header-anchor" href="#forward-list" aria-hidden="true">#</a> forward_list</h3><br><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> list</h3><br><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h3><ol><li><p>初始化</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> m1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>插入</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>m1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;xxl&quot;</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>m1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>遍历</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> m1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> m1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><br><h3 id="queue" tabindex="-1"><a class="header-anchor" href="#queue" aria-hidden="true">#</a> queue</h3><ol><li><p>初始化</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>入队</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>q<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>出队</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取队头元素</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><br><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h3><ol><li>初始化</li></ol><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>插入</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>遍历</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="stack" tabindex="-1"><a class="header-anchor" href="#stack" aria-hidden="true">#</a> stack</h3><ol><li><p>初始化</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> stk<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> stk <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>入栈</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>弹栈</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取栈顶元素</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>判断栈是否为空</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>stk<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><br><h3 id="unordered-map" tabindex="-1"><a class="header-anchor" href="#unordered-map" aria-hidden="true">#</a> unordered_map</h3><br><h3 id="unordered-set" tabindex="-1"><a class="header-anchor" href="#unordered-set" aria-hidden="true">#</a> unordered_set</h3><br><h3 id="vector" tabindex="-1"><a class="header-anchor" href="#vector" aria-hidden="true">#</a> vector</h3><ol><li><p>初始化</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>	<span class="token comment">// 创建一个大小为10的数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>	<span class="token comment">// 创建一个大小为10, 且全部元素初始化为 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>	<span class="token comment">// 设定元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>插入</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>遍历</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 使用 at() 函数来遍历, 可以判断是否越界</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 使用 [] 来遍历</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 使用迭代器来遍历</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用自动判断类型</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><br><h2 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h2><br><h2 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h2><br><h2 id="仿函数" tabindex="-1"><a class="header-anchor" href="#仿函数" aria-hidden="true">#</a> 仿函数</h2><h2 id="适配器-配接器" tabindex="-1"><a class="header-anchor" href="#适配器-配接器" aria-hidden="true">#</a> 适配器（配接器）</h2><br><h2 id="空间配置器" tabindex="-1"><a class="header-anchor" href="#空间配置器" aria-hidden="true">#</a> 空间配置器</h2><br><h1 id="线程、进程" tabindex="-1"><a class="header-anchor" href="#线程、进程" aria-hidden="true">#</a> 线程、进程</h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout  <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;T1&quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout  <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;T2&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    thread <span class="token function">t1</span><span class="token punctuation">(</span>func1<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread <span class="token function">t1</span><span class="token punctuation">(</span>func2<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    
    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><div class="hint-container info"><p class="hint-container-title">相关信息</p></div><h4 id="进程线程区别" tabindex="-1"><a class="header-anchor" href="#进程线程区别" aria-hidden="true">#</a> 进程线程区别</h4><br><h4 id="线程之间共享和非共享资源" tabindex="-1"><a class="header-anchor" href="#线程之间共享和非共享资源" aria-hidden="true">#</a> 线程之间共享和非共享资源</h4><br><h4 id="nptl" tabindex="-1"><a class="header-anchor" href="#nptl" aria-hidden="true">#</a> NPTL</h4><br><h3 id="线程操作函数" tabindex="-1"><a class="header-anchor" href="#线程操作函数" aria-hidden="true">#</a> 线程操作函数</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> <span class="token operator">*</span>thread<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>start_routine<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">pthread_t</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> t1<span class="token punctuation">,</span> pthread_t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_join</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_detach</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_cancel</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child thread...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;arg value: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 创建一个子线程</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>errstr <span class="token operator">=</span> <span class="token function">strerror</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;error: %s\\n&quot;</span><span class="token punctuation">,</span> errstr<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="线程同步" tabindex="-1"><a class="header-anchor" href="#线程同步" aria-hidden="true">#</a> 线程同步</h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>线程的主要优势在于，能够通过全局变量来共享信息。不过，这种便捷的共享是有代价的：必须确保多个线程不会同时修改同一个变量，或者某一线程不会读取正在由其它线程修改的变量。</p><p><code>临界区</code>是指访问某一共享资源的代码片段，并且这段代码的执行应为原子操作，也就是同时访问同一共享资源的其它线程不应终端该片段的执行。</p><p><code>线程同步</code>指当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作，其它线程才能对该内存地址进行操作，而其它线程则处于等待状态。</p></div><br><h4 id="互斥量" tabindex="-1"><a class="header-anchor" href="#互斥量" aria-hidden="true">#</a> 互斥量</h4><p>互斥量相关操作函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>restrict mutex<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">pthread_mutexattr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_mutex_trylock</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><br><h4 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁" aria-hidden="true">#</a> 死锁</h4><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>有时，一个线程需要同时访问两个或更多不同的共享资源，而每个资源又都由不同的互斥量管理。当超过一个线程加锁同一组互斥量时，就有可能发生死锁。</p><p>两个或两个以上的进程在执行过程中，因争夺共享资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁。</p><p>死锁的几种场景：</p><ul><li><p>忘记释放锁</p></li><li><p>重复加锁</p></li></ul><ul><li>多线程多锁，抢占锁资源</li></ul></div><p><img src="https://img-blog.csdnimg.cn/afb583f442fd48cba5d060b0725aed8d.png" alt="image-20230511090511447" loading="lazy"></p><br><h4 id="读写锁" tabindex="-1"><a class="header-anchor" href="#读写锁" aria-hidden="true">#</a> 读写锁</h4><br><h4 id="生产者消费者模型" tabindex="-1"><a class="header-anchor" href="#生产者消费者模型" aria-hidden="true">#</a> 生产者消费者模型</h4><br><h4 id="条件变量" tabindex="-1"><a class="header-anchor" href="#条件变量" aria-hidden="true">#</a> 条件变量</h4><p>条件变量的类型：<code>pthread_cond_t</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span><span class="token class-name">pthread_cond_t</span> <span class="token operator">*</span>restrict cond<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">pthread_condattr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_cond_destroy</span><span class="token punctuation">(</span><span class="token class-name">pthread_cond_t</span> <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token class-name">pthread_cond_t</span> <span class="token operator">*</span>restrict cond<span class="token punctuation">,</span> <span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>restrict mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_cond_timewait</span><span class="token punctuation">(</span><span class="token class-name">pthread_cond_t</span> <span class="token operator">*</span>restrict cond<span class="token punctuation">,</span> <span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>restrict mutex<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>restrict abstime<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token class-name">pthread_cond_t</span> <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_cond_broadcast</span><span class="token punctuation">(</span><span class="token class-name">pthread_cond_t</span> <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h4 id="信号量" tabindex="-1"><a class="header-anchor" href="#信号量" aria-hidden="true">#</a> 信号量</h4><p>信号量的类型：<code>sem_t</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token keyword">int</span> pshared<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sem_trywait</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sem_timedwait</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>abs_timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sem_getvalue</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>sval<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程" aria-hidden="true">#</a> 多线程</h3><br><h3 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池" aria-hidden="true">#</a> 线程池</h3><br><h2 id="进程" tabindex="-1"><a class="header-anchor" href="#进程" aria-hidden="true">#</a> 进程</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><br><h3 id="进程的状态" tabindex="-1"><a class="header-anchor" href="#进程的状态" aria-hidden="true">#</a> 进程的状态</h3><br><h3 id="进程相关指令" tabindex="-1"><a class="header-anchor" href="#进程相关指令" aria-hidden="true">#</a> 进程相关指令</h3><h4 id="查看进程" tabindex="-1"><a class="header-anchor" href="#查看进程" aria-hidden="true">#</a> 查看进程</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> aux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> ajx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>a: 显示终端上的所有进程，包括其它用户的进程</li><li>u: 显示进程的详细信息</li><li>x: 显示没有控制终端的进程</li><li>j: 列出与作业控制相关的信息</li></ul><p><img src="https://img-blog.csdnimg.cn/94a055dcba954ad69554b344420c78fe.png" alt="image-20230510143438539" loading="lazy"></p><p><code>STAT</code>参数意义：</p><table><thead><tr><th style="text-align:left;">参数</th><th>意义</th></tr></thead><tbody><tr><td style="text-align:left;">D</td><td>不可中断 Uninterruptible (usually IO)</td></tr><tr><td style="text-align:left;">R</td><td>正在运行，或在队列中的进程</td></tr><tr><td style="text-align:left;">S</td><td>处于休眠状态</td></tr><tr><td style="text-align:left;">T</td><td>停止或被追踪</td></tr><tr><td style="text-align:left;">Z</td><td>僵尸进程(Zoombi)</td></tr><tr><td style="text-align:left;">W</td><td>进入内存交换 (从内核2.6开始无效)</td></tr><tr><td style="text-align:left;">X</td><td>死掉的进程</td></tr><tr><td style="text-align:left;">&lt;</td><td>高优先级</td></tr><tr><td style="text-align:left;">N</td><td>优先进程</td></tr><tr><td style="text-align:left;">s</td><td>包含子进程</td></tr><tr><td style="text-align:left;">+</td><td>位于前台的进程组</td></tr></tbody></table><br><h4 id="杀死进程" tabindex="-1"><a class="header-anchor" href="#杀死进程" aria-hidden="true">#</a> 杀死进程</h4><div class="hint-container note"><p class="hint-container-title">注</p><p>并不是真的去杀死进程，而是给进程发送某个信号</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">kill</span> <span class="token punctuation">[</span>signal<span class="token punctuation">]</span> pid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">kill</span> <span class="token parameter variable">-l</span> <span class="token comment"># 列出所有信号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">kill</span> <span class="token parameter variable">-SIGKILL</span> 进程ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">kill</span> <span class="token parameter variable">-9</span> 进程ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">killall</span> name <span class="token comment"># 根据进程名杀死进程 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="进程号相关函数" tabindex="-1"><a class="header-anchor" href="#进程号相关函数" aria-hidden="true">#</a> 进程号相关函数</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">pid_t</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获得当前进程ID</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">pid_t</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment">// 获得父进程ID</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">pid_t</span> <span class="token function">getpgid</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span> <span class="token comment">// 获得组进程ID</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="进程创建" tabindex="-1"><a class="header-anchor" href="#进程创建" aria-hidden="true">#</a> 进程创建</h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>系统允许一个进程创建新进程，新进程即为子进程，子进程还可以创建新的子进程，形成进程树结构模型</p></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token class-name">pid_t</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值：</p><ul><li>成功：子进程中返回0，父进程中返回子进程 ID</li><li>失败：返回-1</li></ul><p>失败的2个原因：</p><ol><li>当前系统的进程数已经达到了系统规定的上限，这时 errno 的值被设置为 EAGAIN</li><li>当系统内存不足，这时 errno 的值被设置为 ENOMEN</li></ol><br><h3 id="exec-函数族介绍" tabindex="-1"><a class="header-anchor" href="#exec-函数族介绍" aria-hidden="true">#</a> exec 函数族介绍</h3><br><h3 id="进程控制" tabindex="-1"><a class="header-anchor" href="#进程控制" aria-hidden="true">#</a> 进程控制</h3><br><h4 id="进程退出" tabindex="-1"><a class="header-anchor" href="#进程退出" aria-hidden="true">#</a> 进程退出</h4><br><h4 id="孤儿进程" tabindex="-1"><a class="header-anchor" href="#孤儿进程" aria-hidden="true">#</a> 孤儿进程</h4><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>父进程运行结束，但子进程还在运行 (未运行结束），这样的子进程就称为孤儿进程 (Orphan Process) 。</p><p>每当出现一个孤儿进程的时候，内核就把孤儿进程的父进程设置为 init，init 进程会循环地 wait() 它的已经退出的子进程。这样，当一个孤儿进程凄凉地结束了其生命周期的时候，init 进程就会代表党和政府出面处理它的一切善后工作。因此孤儿进程并不会有什么危害。</p></div><br><h4 id="僵尸进程" tabindex="-1"><a class="header-anchor" href="#僵尸进程" aria-hidden="true">#</a> 僵尸进程</h4><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>每个进程结束之后，都会释放自己地址空间中的用户区数据，内核区的 PCB 没有办法白己释放掉，需要父进程去释放。</p><p>进程终止时，父进程尚末回收，子进程残留资源(PCB）存放于内核中，变成僵尸 (Zombie）进程。</p><p>僵尸进程不能被 kill -9 杀死，这样就会导致一个问题，如果父进程不调用 wait() 或 waitpid() 的话，那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵尸进程， 将因为没有可用的进程号而导致系统不能产生新的进程，此即为僵尸进程的危害，应当避免</p></div><br><h4 id="进程回收" tabindex="-1"><a class="header-anchor" href="#进程回收" aria-hidden="true">#</a> 进程回收</h4><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在每个进程退出的时候，内核样放该进程所有的资源、包括打开的文件、占用的内存等。但是仍然为其保留一定的信息，这些信息主要指进程控制块 PCB 的信息（包括进程号、退出状态、运行时间等）。</p><p>父进程可以通过调用 wait 或 waitpid 得到它的退出状态同时彻底清除掉这个进程。</p><p>wait() 和 waitpid() 函数的功能一样，区别在于，wait() 函数会阻塞，waitpid() 可以设置不阻塞，waitpid() 还可以指定等待哪个子进程结束。</p><p>注意：一次 wait 或 waitpid 调用只能清理一个子进程，清理多个子进程应使用循环。</p></div><br><h4 id="退出信息相关宏函数" tabindex="-1"><a class="header-anchor" href="#退出信息相关宏函数" aria-hidden="true">#</a> 退出信息相关宏函数</h4><br><h3 id="进程间通信" tabindex="-1"><a class="header-anchor" href="#进程间通信" aria-hidden="true">#</a> 进程间通信</h3><h4 id="进程间通讯概念" tabindex="-1"><a class="header-anchor" href="#进程间通讯概念" aria-hidden="true">#</a> 进程间通讯概念</h4><br><h4 id="linux-进程间通信的方式" tabindex="-1"><a class="header-anchor" href="#linux-进程间通信的方式" aria-hidden="true">#</a> Linux 进程间通信的方式</h4><br><h4 id="匿名管道-管道" tabindex="-1"><a class="header-anchor" href="#匿名管道-管道" aria-hidden="true">#</a> 匿名管道（管道）</h4><br><h4 id="有名管道-命名管道" tabindex="-1"><a class="header-anchor" href="#有名管道-命名管道" aria-hidden="true">#</a> 有名管道（命名管道）</h4><br><h4 id="内存映射" tabindex="-1"><a class="header-anchor" href="#内存映射" aria-hidden="true">#</a> 内存映射</h4><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>内存映射 (Memory-mapped I/O) 是将磁盘文件的数据映射到内存，用户通过修改内存就能修改磁盛文件。</p></div><p><img src="https://img-blog.csdnimg.cn/f948411163dc40daa064e10da72ca9ff.png" alt="image-20230510163137753" loading="lazy"></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mmam.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mmp</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">mumap</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="信号" tabindex="-1"><a class="header-anchor" href="#信号" aria-hidden="true">#</a> 信号</h4><h4 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h4><br><h4 id="共享内存" tabindex="-1"><a class="header-anchor" href="#共享内存" aria-hidden="true">#</a> 共享内存</h4><h4 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h4><br><h4 id="相关函数" tabindex="-1"><a class="header-anchor" href="#相关函数" aria-hidden="true">#</a> 相关函数</h4><br><h4 id="共享内存操作命令" tabindex="-1"><a class="header-anchor" href="#共享内存操作命令" aria-hidden="true">#</a> 共享内存操作命令</h4><br><h3 id="多进程" tabindex="-1"><a class="header-anchor" href="#多进程" aria-hidden="true">#</a> 多进程</h3><br><h3 id="进程池" tabindex="-1"><a class="header-anchor" href="#进程池" aria-hidden="true">#</a> 进程池</h3><br><h1 id="静态库动态库" tabindex="-1"><a class="header-anchor" href="#静态库动态库" aria-hidden="true">#</a> 静态库动态库</h1><h2 id="什么是库" tabindex="-1"><a class="header-anchor" href="#什么是库" aria-hidden="true">#</a> 什么是库</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>库文件是计算机上的一类文件，可以简单的把库文件看成是一种代码仓库，它提供给使用者一些可以直接拿来用的变量、函数或类。</p><p>库是特殊的一种程序，编写库的程序和编写一般的程序区别不大，只是库不能单独运行。</p><p>库文件有两种，静态库和动态库（共享库），区别是：</p><ul><li>静态库在程序的链接阶段被复制到了程序中</li><li>动态库在链接阶段没有被复制到程序中，而是程序在运行时由系统动态加载到内存中供程序调用</li></ul><p>库的好处：1.代码保密 2.方便部署和分发</p></div><h2 id="静态库" tabindex="-1"><a class="header-anchor" href="#静态库" aria-hidden="true">#</a> 静态库</h2><h3 id="命名规则" tabindex="-1"><a class="header-anchor" href="#命名规则" aria-hidden="true">#</a> 命名规则</h3><ul><li><p>Linux</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>libxxx.a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>lib: 前缀（固定）</p><p>xxx: 库的名字（自定）</p><p>.a: 后缀（固定）</p><br></li><li><p>Windows</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>libxxx.lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br></li></ul><h3 id="静态库的制作" tabindex="-1"><a class="header-anchor" href="#静态库的制作" aria-hidden="true">#</a> 静态库的制作</h3><ol><li><p>gcc 获得 <code>.o</code> 文件</p></li><li><p>使用 <code>ar</code> 工具(archive)将 <code>.o</code> 文件打包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ar rcs libxxx.a xxx.o xxx.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>r: 将文件插入备存文件中</p><p>c: 建立备存文件</p><p>s: 索引</p></li></ol><br><h2 id="动态库" tabindex="-1"><a class="header-anchor" href="#动态库" aria-hidden="true">#</a> 动态库</h2><h3 id="命名规则-1" tabindex="-1"><a class="header-anchor" href="#命名规则-1" aria-hidden="true">#</a> 命名规则</h3><ul><li><p>Linux</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>libxxx.so
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>lib: 前缀（固定）</p><p>xxx: 库的名字（自定）</p><p>.so: 后缀（固定）</p><br></li><li><p>Windows</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>libxxx.dll
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br></li></ul><h3 id="动态库的制作" tabindex="-1"><a class="header-anchor" href="#动态库的制作" aria-hidden="true">#</a> 动态库的制作</h3><ol><li><p>gcc 获得 <code>.o</code> 文件，得到和位置无关的代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> <span class="token parameter variable">-fpic</span> a.c b.c

或

gcc <span class="token parameter variable">-c</span> <span class="token parameter variable">-fPIC</span> a.c b.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>gcc 得到动态库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-shared</span> a.o b.o <span class="token parameter variable">-o</span> libcalc.so
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>r: 将文件插入备存文件中</p><p>c: 建立备存文件</p><p>s: 索引</p></li></ol><br><h1 id="c-c-的编译链接" tabindex="-1"><a class="header-anchor" href="#c-c-的编译链接" aria-hidden="true">#</a> C/C++ 的编译链接</h1><h2 id="使用-msvc-编译代码" tabindex="-1"><a class="header-anchor" href="#使用-msvc-编译代码" aria-hidden="true">#</a> 使用 MSVC 编译代码</h2><p><img src="https://i.loli.net/2021/05/16/Oif58NbWYzoTjta.png" alt="image-20210516111054443" loading="lazy"></p><ol><li>打开适用于 vs2017 的 x64 本机工具命令提示</li><li>输入<code>cl + &quot;文件绝对路径&quot;</code> 或者 输入 g++ 文件名 -o 输出文件名</li><li>编译完成后，会生成可执行文件.exe，.obj是二进制代码</li><li>输入文件名即可运行</li></ol><br><h2 id="程序编译步骤" tabindex="-1"><a class="header-anchor" href="#程序编译步骤" aria-hidden="true">#</a> 程序编译步骤</h2><p><img src="https://img-blog.csdnimg.cn/3e1836f59d434800911d97dd089dd254.png" alt="image-20230508135245427" loading="lazy"></p><ol><li><p>预处理（Preprocessing）\`\`gcc -E *.c &gt; test.ii\` ，会把预处理的内容保存到txt</p><ol><li><strong>预处理指令执行（头文件引入）</strong></li><li><strong>宏展开</strong></li></ol></li><li><p><strong>预编译</strong> \`\`g++ -S test.ii\`, 会生成一个test.s文件，就是汇编代码</p><ol><li>编译（Compilation）</li><li>汇编（Assembly）\`\`g++ -c test.s\`,linux生成.o，windows生成.obj，把汇编转成二进制</li></ol></li><li><p><strong>编译</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> *.c //生成目标文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>链接（Linking）(多个文件链接成一个可执行文件)</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc main.o add.o sub.o <span class="token parameter variable">-o</span> demo.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sehll line-numbers-mode" data-ext="sehll"><pre class="language-sehll"><code>gcc *.o -o demo.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><br><h2 id="gcc、g" tabindex="-1"><a class="header-anchor" href="#gcc、g" aria-hidden="true">#</a> GCC、G++</h2><h3 id="gcc-常用参数选项" tabindex="-1"><a class="header-anchor" href="#gcc-常用参数选项" aria-hidden="true">#</a> GCC 常用参数选项</h3><table><thead><tr><th>GCC 编译选项</th><th>说明</th></tr></thead><tbody><tr><td>-E</td><td>预处理指定的源文件，不进行编译（宏替换、去掉注释）。生成 .i 文件</td></tr><tr><td>-S</td><td>编译指定的源文件，但是不进行汇编。生成 .s 文件</td></tr><tr><td>-c</td><td>编译、汇编指定的源文件，但是不进行链接。生成 .o 文件</td></tr><tr><td>-o</td><td></td></tr><tr><td>-I</td><td></td></tr><tr><td>-g</td><td></td></tr><tr><td>-D</td><td></td></tr><tr><td>-w</td><td></td></tr><tr><td>-Wall</td><td></td></tr><tr><td>-On</td><td></td></tr><tr><td>-l</td><td></td></tr><tr><td>-L</td><td></td></tr><tr><td>-fPIC/fpic</td><td></td></tr><tr><td>-shared</td><td></td></tr><tr><td>-std</td><td></td></tr></tbody></table><img src="https://i.loli.net/2021/09/03/8pxfOJXvlYhRGAB.png" style="zoom:80%;"><img src="https://i.loli.net/2021/09/03/Ew9AJFXHnrysC2B.png" style="zoom:80%;"><br><h3 id="g" tabindex="-1"><a class="header-anchor" href="#g" aria-hidden="true">#</a> G++</h3><img src="https://i.loli.net/2021/09/03/2whCzWcqjbpeL8F.png" alt="image-20210903144046985" style="zoom:67%;"><br><h3 id="多文件编译" tabindex="-1"><a class="header-anchor" href="#多文件编译" aria-hidden="true">#</a> 多文件编译</h3><p><img src="https://i.loli.net/2021/09/02/kzrKg7dXMDajPLv.png" alt="image-20210902134954496" loading="lazy"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> main.c     // 会生成一个.o文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> add.c     // 会生成一个.o文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> sub.c     // 会生成一个.o文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://i.loli.net/2021/09/02/VITJlEXeivUwdnk.png" alt="image-20210902135431636" loading="lazy"></p><p>链接：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc *.o <span class="token parameter variable">-o</span> demo
或者
gcc main.o add.o sub.o <span class="token parameter variable">-o</span> demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://i.loli.net/2021/09/02/XRYGbwTFAOc68fP.png" alt="image-20210902135740547" loading="lazy"></p><p>但是这样一个文件对应一行的编译，效率很慢，而且当文件有几十个或者几百个时会很复杂、繁琐</p><br><h2 id="makefile" tabindex="-1"><a class="header-anchor" href="#makefile" aria-hidden="true">#</a> Makefile</h2><ul><li>linux下C/C++编程makefile应用广泛</li><li>编译移植开源项目，大部分开源项目都基于 makefile,学会 makefile 才能够调试编译过程中的问题</li><li>手写 makefile 太过于繁琐，自动生成的 makefile 不易于配置，学习本门课程编写自动化 makefile,以后新项目只需要include makefile头文件</li></ul><br><h3 id="makefile-文件命名和规则" tabindex="-1"><a class="header-anchor" href="#makefile-文件命名和规则" aria-hidden="true">#</a> Makefile 文件命名和规则</h3><p>makefile 或 Makefile</p><br><h3 id="makefile-文件内容" tabindex="-1"><a class="header-anchor" href="#makefile-文件内容" aria-hidden="true">#</a> Makefile 文件内容</h3><ul><li>makefile文件主要包含了5部分内容： <ol><li>显式规则。说明了如何生成一个或多个目标文件。由makefile文件的创作者指出，包括要生成的文件、文件的依赖文件、生成的命令。</li><li>隐式规则。由于make有自动推导的功能，所以隐式的规则可以比较粗糙地简略书写makefile文件，这是由make所支持的。</li><li>变量定义。在makefile.文件中要定义一系列的变量，变量一般都是字符串，这与C语言中的宏有些类似。当makefile文件执行时，其中的变量都会扩展到相应的引用位置上。</li><li>文件指示。其包括3个部分，一个是在一个makefile文件中引用另一个makefile文件；另一个是指根据某些情况指定makefile文件中的有效部分；还有就是定义一个多行的命令。</li><li>注释。makefile.文件中只有行注释，其注释用“#&quot;字符。如果要在makefile文件中使用“#&quot;字符，可以用反斜框进行转义，如：“#”。</li></ol></li></ul><p>基本语法：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">目的</span><span class="token punctuation">:</span>依赖
	通过依赖生成目的的命令
	
<span class="token variable">$@</span> ：代表的是目的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> makefile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h4 id="编写" tabindex="-1"><a class="header-anchor" href="#编写" aria-hidden="true">#</a> 编写</h4><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">math.exe</span><span class="token punctuation">:</span> main.o add.o sub.o
	gcc main.o add.o sub.o -o demo.exe
<span class="token target symbol">main.o</span><span class="token punctuation">:</span>main.c
	gcc -c main.c -o main.o
<span class="token target symbol">add.o</span><span class="token punctuation">:</span>add.c
	gcc -c add.c -o add.o
<span class="token target symbol">sub.o</span><span class="token punctuation">:</span>sub.c
	gcc -c sub.c -o sub.o
<span class="token target symbol">clean</span><span class="token punctuation">:</span>
	rm -f *.o 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="开始编译" tabindex="-1"><a class="header-anchor" href="#开始编译" aria-hidden="true">#</a> 开始编译</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://i.loli.net/2021/09/02/rLuXQ15HKWsmjM9.png" alt="image-20210902140857513" loading="lazy"></p><p>删除.o文件<code>make clean</code></p><p><img src="https://i.loli.net/2021/09/02/JvCIzpmD3k6RayH.png" alt="image-20210902141408006" loading="lazy"></p><p>还有个优化：</p><p><code>&lt;</code> 会依次对应第一行写的.o文件，按照顺序进行编译</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">math.exe</span><span class="token punctuation">:</span> main.o add.o sub.o
	gcc *.o -o <span class="token variable">$@</span>
<span class="token target symbol">%.o</span><span class="token punctuation">:</span>%.c
	gcc -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span>
<span class="token target symbol">clean</span><span class="token punctuation">:</span>
	rm -f *.o 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://i.loli.net/2021/09/02/Et53eViyCmjFZpu.png" alt="image-20210902142542130" loading="lazy"></p><br><h2 id="makefile语法" tabindex="-1"><a class="header-anchor" href="#makefile语法" aria-hidden="true">#</a> makefile语法</h2><h4 id="变量-常见预定义变量" tabindex="-1"><a class="header-anchor" href="#变量-常见预定义变量" aria-hidden="true">#</a> 变量-常见 预定义变量</h4><p><img src="https://i.loli.net/2021/09/03/jy94dELFBiqUgXJ.png" alt="image-20210903144829164" loading="lazy"></p><p><img src="https://i.loli.net/2021/09/03/PlXgrJnUCY3wLxI.png" alt="image-20210903145007007" loading="lazy"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># first_make</span>
<span class="token comment"># $^ 表示依赖  不重复</span>
<span class="token comment"># $@ 表示目标</span>
<span class="token comment"># @ 加在命令的前面表示不在终端打印出具体的语句 -加个横杠表示该行命令执行错误后继续往下执行</span>
<span class="token comment"># 定义一个变量</span>
<span class="token assign-left variable">TARGET</span><span class="token operator">=</span>first_make
first_make:first_name.cpp
	<span class="token variable"><span class="token variable">$(</span>CXX<span class="token variable">)</span></span> $^ <span class="token parameter variable">-o</span> <span class="token variable">$@</span> <span class="token parameter variable">-lpthread</span>

	
<span class="token assign-left variable">TARGET</span><span class="token operator">=</span>first_make  <span class="token comment"># 目标文件</span>
<span class="token variable"><span class="token variable">$(</span>TARGET<span class="token variable">)</span></span>:first_make.cpp xdata.cpp
	@<span class="token comment">#-@rm test</span>
	@echo <span class="token string">&quot;begin to build <span class="token variable"><span class="token variable">$(</span>TARGET<span class="token variable">)</span></span>&quot;</span>
	@<span class="token variable"><span class="token variable">$(</span>CXX<span class="token variable">)</span></span>:WQ
    $^ <span class="token parameter variable">-o</span> <span class="token variable">$@</span> <span class="token variable"><span class="token variable">$(</span>LIBS<span class="token variable">)</span></span>
	@echo <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>TARGET<span class="token variable">)</span></span> build success!&quot;</span>
	
	
<span class="token assign-left variable">TARGET</span><span class="token operator">=</span>first_make  <span class="token comment"># 目标文件</span>
<span class="token assign-left variable">LIBS</span><span class="token operator">=</span>-lpthread     <span class="token comment"># 包含的一些库</span>
<span class="token assign-left variable">OBJS</span><span class="token operator">=</span>first_make.o xdata.o <span class="token comment"># 生成的二进制文件</span>
<span class="token assign-left variable">CXXFLAGS</span><span class="token operator">=</span>-I./include      <span class="token comment"># 在C++包含的头文件所在位置</span>

<span class="token variable"><span class="token variable">$(</span>TARGET<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span>OBJS<span class="token variable">)</span></span>  <span class="token comment"># 这就是定义变量的好处</span>
	@<span class="token comment">#-@ rm test</span>
	@echo <span class="token string">&quot;begin to build <span class="token variable"><span class="token variable">$(</span>TARGET<span class="token variable">)</span></span>&quot;</span>
	@<span class="token variable"><span class="token variable">$(</span>CXX<span class="token variable">)</span></span> $^ <span class="token parameter variable">-o</span> <span class="token variable">$@</span> <span class="token variable"><span class="token variable">$(</span>LIBS<span class="token variable">)</span></span>
	@echo <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>TARGET<span class="token variable">)</span></span> build success!&quot;</span>
<span class="token comment"># 编译完成后，清理中间生成的文件   </span>
clean:
	<span class="token variable"><span class="token variable">$(</span>RM<span class="token variable">)</span></span> <span class="token variable"><span class="token variable">$(</span>OBJS<span class="token variable">)</span></span> <span class="token variable"><span class="token variable">$(</span>TARGET<span class="token variable">)</span></span>
.PHONY: clean *.clean

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要执行目标项，输入命令时要指定 <code>make clean</code></p><p>一般用来清理掉，重新编译</p><br><h2 id="gcc编译动态链接库" tabindex="-1"><a class="header-anchor" href="#gcc编译动态链接库" aria-hidden="true">#</a> GCC编译动态链接库</h2><p>所谓动态链接库，就是指在代码运行的过程中去加载的</p>`,280),x={href:"http://xn--5nqz7jm0rjtas67g.so",target:"_blank",rel:"noopener noreferrer"},y=a("li",null,[a("p",null,"而静态库会把所有的二进制代码都复制过去，因此静态库的文件会更大一些，文件后缀是.a")],-1),w=p(`<img src="https://i.loli.net/2021/09/03/dx84tPIv69oJ51g.png" alt="image-20210903175303415" style="zoom:50%;"><img src="https://i.loli.net/2021/09/03/B9PxMKd8f1TnjSq.png" alt="image-20210903175319685" style="zoom:50%;"><br><h3 id="静态库-1" tabindex="-1"><a class="header-anchor" href="#静态库-1" aria-hidden="true">#</a> 静态库</h3><img src="https://i.loli.net/2021/09/03/XM8Aof63inO4hVm.png" alt="image-20210903175411203" style="zoom:67%;"><br><h1 id="gdb" tabindex="-1"><a class="header-anchor" href="#gdb" aria-hidden="true">#</a> GDB</h1><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>GDB 是由</p></div><blockquote><p>注：表格里面的 <code>/</code> 表示或者</p></blockquote><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>启动和退出</td><td>gdb 可执行程序<br>quit/q</td></tr><tr><td>给程序设置参数/获取设置参数</td><td>set args 10 20 <br>show args</td></tr><tr><td>GDB 使用帮助</td><td>help</td></tr><tr><td>查看当前文件代码</td><td>List/l 从默认位置显示<br>list/l 行号 从指定的行显示<br>list/l 函数名 从指定的函数显示</td></tr><tr><td>设置显示的行数</td><td>show list/listsize<br>set list/listsize 行数</td></tr><tr><td>设置断点</td><td>b/break 行号<br>b/break 函数名<br>b/break 文件名:行号<br>b/break 文件名:函数</td></tr><tr><td>查看断点</td><td>i/info b/break</td></tr><tr><td>删除断点</td><td>d/del/delete 断点编号</td></tr><tr><td>设置断点无效</td><td>dis/disable 断点编号</td></tr><tr><td>设置断点生效</td><td>ena/enable 断点编号</td></tr><tr><td>设置条件断点（一般用在循环位置）</td><td>b/break 10 if i==5</td></tr><tr><td>运行 GDB 程序</td><td>start 程序停在第一行<br>run 遇到断点就停</td></tr><tr><td>继续运行，到下一个断点停</td><td>c/continue</td></tr><tr><td>向下执行一行代码（不进入函数体）</td><td>n/next</td></tr><tr><td>向下单步调试（进入函数体）</td><td>s/setp<br>finish（跳出函数体）</td></tr><tr><td>变量操作</td><td>p/print 变量名（打印变量值）<br>ptype 变量名 （打印变量类型）</td></tr><tr><td>自动变量操作</td><td>display 变量名（自动打印指定变量的值）<br>i/info display<br>undisplay</td></tr><tr><td>其它操作</td><td>set var 变量名=变量值（循环中用的较多）<br>until （跳出循环）</td></tr><tr><td></td><td></td></tr></tbody></table><p><br><br></p><h1 id="文件io" tabindex="-1"><a class="header-anchor" href="#文件io" aria-hidden="true">#</a> 文件IO</h1><h2 id="标准c库io函数" tabindex="-1"><a class="header-anchor" href="#标准c库io函数" aria-hidden="true">#</a> 标准C库IO函数</h2><p><img src="https://img-blog.csdnimg.cn/8d5cda3fe3f9473aa6da197375bb6e2c.png" alt="image-20230509101605460" loading="lazy"></p><br><h2 id="标准c库io和linux系统io的关系" tabindex="-1"><a class="header-anchor" href="#标准c库io和linux系统io的关系" aria-hidden="true">#</a> 标准C库IO和Linux系统IO的关系</h2><br><h2 id="虚拟地址空间" tabindex="-1"><a class="header-anchor" href="#虚拟地址空间" aria-hidden="true">#</a> 虚拟地址空间</h2><p><img src="https://img-blog.csdnimg.cn/1bb690ba57664891b4fc380ad96525e3.png" alt="image-20230509111129121" loading="lazy"></p><br><h2 id="文件描术符" tabindex="-1"><a class="header-anchor" href="#文件描术符" aria-hidden="true">#</a> 文件描术符</h2><p><img src="https://img-blog.csdnimg.cn/b6a0d56a123b4e44867e89203fcb4422.png" alt="image-20230509162243510" loading="lazy"></p><br><h2 id="linux系统io函数" tabindex="-1"><a class="header-anchor" href="#linux系统io函数" aria-hidden="true">#</a> Linux系统IO函数</h2><div class="hint-container info"><p class="hint-container-title">小技巧</p><p>使用 <code>man</code> 命令可查看手册，手册一共有8个章节。比如：</p><ol><li><p>查看 <code>ls</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">man</span> <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看第2章的 open 函数</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">man</span> <span class="token number">2</span> <span class="token function">open</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">off_t</span> <span class="token function">lseek</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">stat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>statbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">lstat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>statbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>stat 结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">stat</span><span class="token punctuation">{</span>
  <span class="token class-name">dev_t</span> st_dev<span class="token punctuation">;</span>			<span class="token comment">// </span>
  <span class="token class-name">ino_t</span> st_ino<span class="token punctuation">;</span>			<span class="token comment">// </span>
  <span class="token class-name">mode_t</span> st_mode<span class="token punctuation">;</span>		<span class="token comment">// </span>
  <span class="token class-name">nlink_t</span> st_nlink<span class="token punctuation">;</span>	<span class="token comment">// 连接</span>
  <span class="token class-name">uid_t</span> st_uid<span class="token punctuation">;</span>
  <span class="token class-name">gid_t</span> st_gid<span class="token punctuation">;</span>
  <span class="token class-name">dev_t</span> st_rdev<span class="token punctuation">;</span>
  <span class="token class-name">off_t</span> st_size<span class="token punctuation">;</span>
  <span class="token class-name">blksize_t</span> st_blksize<span class="token punctuation">;</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="文件属性操作函数" tabindex="-1"><a class="header-anchor" href="#文件属性操作函数" aria-hidden="true">#</a> 文件属性操作函数</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><br><h2 id="目录操作函数" tabindex="-1"><a class="header-anchor" href="#目录操作函数" aria-hidden="true">#</a> 目录操作函数</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">rename</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>oldpath<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>newpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="目录遍历函数" tabindex="-1"><a class="header-anchor" href="#目录遍历函数" aria-hidden="true">#</a> 目录遍历函数</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>DIR <span class="token operator">*</span><span class="token function">opendir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">dirent</span> <span class="token operator">*</span><span class="token function">readdir</span><span class="token punctuation">(</span>DIR<span class="token punctuation">,</span> <span class="token operator">*</span>dirp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">closedir</span><span class="token punctuation">(</span>DIR<span class="token punctuation">,</span> <span class="token operator">*</span>dirp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="dirent-结构体和-d-type" tabindex="-1"><a class="header-anchor" href="#dirent-结构体和-d-type" aria-hidden="true">#</a> dirent 结构体和 d_type</h2><br><h2 id="dup、dup2-函数" tabindex="-1"><a class="header-anchor" href="#dup、dup2-函数" aria-hidden="true">#</a> dup、dup2 函数</h2><br><h2 id="fcntl-函数" tabindex="-1"><a class="header-anchor" href="#fcntl-函数" aria-hidden="true">#</a> fcntl 函数</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 复制文件描述符、设置/获取文件的状态标志</span>
<span class="token keyword">int</span> <span class="token function">fcntl</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">/* arg */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h1 id="网络编程" tabindex="-1"><a class="header-anchor" href="#网络编程" aria-hidden="true">#</a> 网络编程</h1><h2 id="mac-地址" tabindex="-1"><a class="header-anchor" href="#mac-地址" aria-hidden="true">#</a> MAC 地址</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>网卡是一块被设计用来允许计算机在计算机网络上进行通讯的计算机硬件，又称为网络适配器或网络接口卡 NIC。其拥有 MAC 地址，属于 OSI 模型的第 2 层，它使得用户可以通过电缆或无线相互连接。每一个网卡都有一个被称为 MAC 地址的独一无二的 48 位串行号。网卡的主要功能：</p><ol><li><p>数据的封装与解封装</p></li><li><p>链路管理</p></li><li><p>数据编码与译码</p></li></ol></div><p><img src="https://img-blog.csdnimg.cn/75ab8051af8b4e9eb7900905ec6ef4ae.png" alt="image-20230511093945152" loading="lazy"></p><br><h2 id="ip地址" tabindex="-1"><a class="header-anchor" href="#ip地址" aria-hidden="true">#</a> IP地址</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p></div><br><h2 id="端口" tabindex="-1"><a class="header-anchor" href="#端口" aria-hidden="true">#</a> 端口</h2><br><h2 id="网络模型" tabindex="-1"><a class="header-anchor" href="#网络模型" aria-hidden="true">#</a> 网络模型</h2><br><h2 id="协议" tabindex="-1"><a class="header-anchor" href="#协议" aria-hidden="true">#</a> 协议</h2><br><h2 id="网络通信过程" tabindex="-1"><a class="header-anchor" href="#网络通信过程" aria-hidden="true">#</a> 网络通信过程</h2><br><h2 id="socket介绍" tabindex="-1"><a class="header-anchor" href="#socket介绍" aria-hidden="true">#</a> socket介绍</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>所谓 socket(套接字），就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是<code>应用程序与网络协议根进行交互的接口</code>。</p><p>socket 可以看成是两个网络应用程序进行通信时，各自通信连接中的端点，这是一个逻得上的概念。它是网络环境中进程间通信的 API，也是可以被命名和寻址的通信端点，使用中的每一个套接宇都有其类型和一个与之相连进程。通信时其中一个网络应用程序将要传输的一段信息写入它所在主机的 socket 中，该 socket 通过与网络接口卡 (NIC) 相连的传输介质将这段信息送到另外一台主机的 socket 中，使对方能够接收到这段信息。socket 是由 1P 地址和端口结合的，提供向应用层进程传送数据包的机制。</p><p>socket 本身有“插座&quot;的意思，在Linux环境下，用于表示进程间网络通信的特殊文件类型。本质为内核借助缓冲区形成的伪文件。既然是文件，那么理所当然的，我们可以使用文件描述符引用套接宇。与管道类似的，Linux 系统将其封装成文件的目的是为了统一接口，使得读写套接字和读写文件的操作一致。区别是管道主要应用于本地进程问通信，而套接字多应用于网络进程间数据的传递。</p></div><p><img src="https://img-blog.csdnimg.cn/efdc3b62f12345a8ad17930080a814e8.png" alt="image-20230511174342157" loading="lazy"></p><blockquote><p>套接字通信分两部分</p><ul><li>服务端：被动接受连接，一般不会主动发起连接</li><li>客户端：主动向服务器发起连接</li></ul><p>socket 是一种通信的接口, Linux 和 Windows 都有, 但是有一些细微的差别</p></blockquote><br><h2 id="字节序" tabindex="-1"><a class="header-anchor" href="#字节序" aria-hidden="true">#</a> 字节序</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>现代 CPU 的累加器一次都能装载（至少）4字节（这里考虑 32 位机），即一个整数。那么这4 字节在内存中排列的顺序将影响它被累加器装载成的整数的值，这就是字节序问题。在各种计算机体系结构中，对于字节、宇等的存储机制有所不同，因而引发了计算机通信领域中一个很重要的问题，即通信双方交流的信息单元(比特、字节、字、双宇等等)应该以什么样的顺序进行传送。如果不达成一致的规则，通信双方将无法进行正确的编码/译码从而导致通信失败。</p><blockquote><p>字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序(一个字节的数据当然就无需谈顺序的问题了)。</p></blockquote><p>字节序分为<code>大端字节序</code>（Big- Endian）和<code>小端字节序</code> (Little-Endian)。</p><ul><li><p>大端字节序是指一个整数的最高位字节(23 ~ 31 bit）存储在内存的低地址处，低位字节(0 ~ 7bit）存储在内存的高地址处；</p></li><li><p>小端字节序则是指整数的高位字节存储在内存的高地址处，而低位字节则存储在内存的低地址处。</p></li></ul></div><br><h3 id="字节序举例" tabindex="-1"><a class="header-anchor" href="#字节序举例" aria-hidden="true">#</a> 字节序举例</h3><ul><li><p>小端字节序</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">0</span>x <span class="token number">11</span> <span class="token number">22</span> <span class="token number">33</span> <span class="token number">44</span> <span class="token number">12</span> <span class="token number">34</span> <span class="token number">56</span> <span class="token number">78</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img-blog.csdnimg.cn/bcf41ae971884d949aade2e492365ebc.png" alt="image-20230511175306099" loading="lazy"></p></li><li><p>大端字节序</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">0</span>x <span class="token number">12</span> <span class="token number">34</span> <span class="token number">56</span> <span class="token number">78</span> <span class="token number">11</span> <span class="token number">22</span> <span class="token number">33</span> <span class="token number">44</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img-blog.csdnimg.cn/2706349c08bc4a0cb1957ead0c4085a8.png" alt="image-20230511175457937" loading="lazy"></p></li></ul><br><h3 id="字节序转换函数" tabindex="-1"><a class="header-anchor" href="#字节序转换函数" aria-hidden="true">#</a> 字节序转换函数</h3><div class="hint-container info"><p class="hint-container-title">相关信息</p></div><br><h2 id="socket地址" tabindex="-1"><a class="header-anchor" href="#socket地址" aria-hidden="true">#</a> socket地址</h2><br><h2 id="ip地址转换" tabindex="-1"><a class="header-anchor" href="#ip地址转换" aria-hidden="true">#</a> IP地址转换</h2><p>字符串IP-整数，主机、网络字节序的转换</p><br><h2 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp" aria-hidden="true">#</a> TCP</h2><h3 id="tcp通信流程" tabindex="-1"><a class="header-anchor" href="#tcp通信流程" aria-hidden="true">#</a> TCP通信流程</h3><br><h3 id="套接字函数" tabindex="-1"><a class="header-anchor" href="#套接字函数" aria-hidden="true">#</a> 套接字函数</h3><br><h3 id="tcp三次握手" tabindex="-1"><a class="header-anchor" href="#tcp三次握手" aria-hidden="true">#</a> TCP三次握手</h3><p><img src="https://img-blog.csdnimg.cn/5236751fd4854cfcad4f47303446f823.png" alt="image-20230512092620898" loading="lazy"></p><br><h3 id="tcp滑动窗口" tabindex="-1"><a class="header-anchor" href="#tcp滑动窗口" aria-hidden="true">#</a> TCP滑动窗口</h3><br><h3 id="tcp四次挥手" tabindex="-1"><a class="header-anchor" href="#tcp四次挥手" aria-hidden="true">#</a> TCP四次挥手</h3><p><img src="https://img-blog.csdnimg.cn/554dee7413db4f6085fe0f7f4af83a56.png" alt="image-20230512091754847" loading="lazy"></p><br><h3 id="tcp状态转换" tabindex="-1"><a class="header-anchor" href="#tcp状态转换" aria-hidden="true">#</a> TCP状态转换</h3><br><h2 id="端口复用" tabindex="-1"><a class="header-anchor" href="#端口复用" aria-hidden="true">#</a> 端口复用</h2><br><h2 id="i-o-多路复用-i-o多路连接" tabindex="-1"><a class="header-anchor" href="#i-o-多路复用-i-o多路连接" aria-hidden="true">#</a> I/O 多路复用（I/O多路连接）</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>I/O 多路复用使得程序能同时监听多个文件描述符，能够提高程序的性能，Linux 下实现 I/0 多路复用的系统调用主要有 select、poll 和 epoll。</p></div><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> select</h3><div class="hint-container info"><p class="hint-container-title">主旨思想</p><ol><li><p>首先要构造一个关于文件描述符的列表，将要监听的文件描述符添加到该列表中。</p></li><li><p>调用一个系统函数，监听该列表中的文件描述符，直到这些描述符中的一个或者多个进行 I/O 操作时，该函数才返回。</p><ul><li><p>这𠆤函数是阻塞</p></li><li><p>函数对文件描述符的检测的操作是由内核完成的</p></li></ul></li><li><p>在返回时，它会告诉进程有多少（哪些） 描述符要进行 I/O 操作。</p></li></ol></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// sizeof(fd_set) = 128 1024</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/select.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> nfds<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>readfds<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>writefds<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>exceptfds<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>nfds: 委托内核检测的最大文件描述符的值 + 1</li><li></li></ul>`,114);function _(q,C){const i=c("ExternalLinkIcon"),e=c("font");return o(),d("div",null,[u,k,a("p",null,[n("参考："),a("a",h,[n("https://mp.weixin.qq.com/s/eFFc74OpA1ca2LlCB94Siw"),s(i)])]),v,a("p",null,[a("a",m,[n("Github 主页"),s(i)])]),b,a("ul",null,[a("li",null,[s(e,{color:"#629eb6"},{default:t(()=>[n("第一个元素游标存放的是备用链表的下标，第一个元素和最后一个元素不存放数据")]),_:1})]),a("li",null,[s(e,{color:"#629eb6"},{default:t(()=>[n("数组的最后一位游标的设置为：第一位有数据的下标，下面表格的就是下标为1的才有数据")]),_:1})]),a("li",null,[s(e,{color:"#629eb6"},{default:t(()=>[n("每一个元素的游标指向下一个元素的下标")]),_:1})])]),g,a("ol",null,[a("li",null,[s(e,{color:"#6c96ca"},{default:t(()=>[n("找到没有数据的备用链表开头(获得空闲分量的下标)，下面的是5")]),_:1})]),a("li",null,[s(e,{color:"#6c96ca"},{default:t(()=>[n("让A的游标指向B的游标，也就是5")]),_:1})]),a("li",null,[s(e,{color:"#6c96ca"},{default:t(()=>[n("最后让B的游标指向C的游标，也就是3")]),_:1})])]),f,a("ul",null,[a("li",null,[a("p",null,[n("动态库只会把动态库函数的地址复制过来，"),a("a",x,[n("文件后缀是.so"),s(i)])])]),y]),w])}const I=l(r,[["render",_],["__file","C:C__.html.vue"]]);export{I as default};

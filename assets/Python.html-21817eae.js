import{_ as p,X as o,Y as i,Z as n,$ as s,a0 as e,a1 as a,F as c}from"./framework-dbbbcf5d.js";const l={},u=a(`<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python" aria-hidden="true">#</a> Python</h1><h2 id="操作数据库" tabindex="-1"><a class="header-anchor" href="#操作数据库" aria-hidden="true">#</a> 操作数据库</h2><h3 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h3><br><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="连接" tabindex="-1"><a class="header-anchor" href="#连接" aria-hidden="true">#</a> 连接</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> redis

con <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>
    host<span class="token operator">=</span><span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
    port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span>
    db<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment"># 数据库默认没有名字，通过0-15来表示，一共16个</span>
    decode_response<span class="token operator">=</span><span class="token boolean">True</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><br><h2 id="爬虫" tabindex="-1"><a class="header-anchor" href="#爬虫" aria-hidden="true">#</a> 爬虫</h2><h3 id="代理" tabindex="-1"><a class="header-anchor" href="#代理" aria-hidden="true">#</a> 代理</h3><p>代理的使用形式</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>proxies_dict <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token string">&quot;http&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;http://&quot;</span> <span class="token operator">+</span> ip<span class="token punctuation">:</span>端口<span class="token punctuation">,</span>
   <span class="token string">&quot;https&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;https://&quot;</span> <span class="token operator">+</span> ip<span class="token punctuation">:</span>端口<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="xpath" tabindex="-1"><a class="header-anchor" href="#xpath" aria-hidden="true">#</a> XPath</h3><p>可以安装这个插件，辅助书写xpath</p><p><img src="https://i.loli.net/2021/08/10/bhDzyRPQ3tIoc6E.png" alt="image-20210810135610333" loading="lazy"></p><p><img src="https://i.loli.net/2021/08/10/plFOzLVU1XGZm9r.png" alt="image-20210810135628596" loading="lazy"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 			表示跨节点
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>div<span class="token punctuation">[</span><span class="token punctuation">]</span>		 表示选择div标签，里面	@id	@class	可以根据id和class定位
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//div<span class="token punctuation">[</span>@class<span class="token operator">=</span><span class="token string">&quot;nl_con clearfix&quot;</span><span class="token punctuation">]</span>/ul/li       表示定位到div标签下的ul，再往下定位到li，符合要求的在网页用黄色高亮
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://i.loli.net/2021/08/10/nSPqp7hkjYNyEzm.png" alt="image-20210810140002277" style="zoom:67%;"><p>但是选择的有两条内容是广告，标签包含style属性，可以利用 <code>[not(@属性)]</code> 将其剔除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//div<span class="token punctuation">[</span>@class<span class="token operator">=</span><span class="token string">&quot;nl_con clearfix&quot;</span><span class="token punctuation">]</span>/ul/li<span class="token punctuation">[</span>not<span class="token punctuation">(</span>@style<span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://i.loli.net/2021/08/10/JVSK6vaHg1dCk97.png" alt="image-20210810140508220" loading="lazy"></p><p>继续往下获取，获取a标签的文本和链接</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//div<span class="token punctuation">[</span>@class<span class="token operator">=</span><span class="token string">&quot;nl_con clearfix&quot;</span><span class="token punctuation">]</span>/ul/li<span class="token punctuation">[</span>not<span class="token punctuation">(</span>@style<span class="token punctuation">)</span><span class="token punctuation">]</span>//div<span class="token punctuation">[</span>@class<span class="token operator">=</span><span class="token string">&quot;nlcd_name&quot;</span><span class="token punctuation">]</span>/a/text<span class="token punctuation">(</span><span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//div<span class="token punctuation">[</span>@class<span class="token operator">=</span><span class="token string">&quot;nl_con clearfix&quot;</span><span class="token punctuation">]</span>/ul/li<span class="token punctuation">[</span>not<span class="token punctuation">(</span>@style<span class="token punctuation">)</span><span class="token punctuation">]</span>//div<span class="token punctuation">[</span>@class<span class="token operator">=</span><span class="token string">&quot;nlcd_name&quot;</span><span class="token punctuation">]</span>/a/@href
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://i.loli.net/2021/08/10/xpP1sEKwj8gYdna.png" alt="image-20210810141429253" loading="lazy"></p><h4 id="contains" tabindex="-1"><a class="header-anchor" href="#contains" aria-hidden="true">#</a> contains</h4><p>取包含 &#39;某文字&#39; 三个字的节点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//ul<span class="token punctuation">[</span>@id<span class="token operator">=</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">]</span>/li/a<span class="token punctuation">[</span>contains<span class="token punctuation">(</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>, <span class="token string">&quot;某文字&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>取 id 包含 &#39;uu&#39; 三个字的节点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//ul<span class="token punctuation">[</span>@id<span class="token operator">=</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">]</span>/li/a<span class="token punctuation">[</span>contains<span class="token punctuation">(</span>@id, <span class="token string">&quot;uu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="start-with" tabindex="-1"><a class="header-anchor" href="#start-with" aria-hidden="true">#</a> start-with</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//ul<span class="token punctuation">[</span>@id<span class="token operator">=</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">]</span>/li/a<span class="token punctuation">[</span>start-with<span class="token punctuation">(</span>@id, <span class="token string">&quot;uu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="ends-with" tabindex="-1"><a class="header-anchor" href="#ends-with" aria-hidden="true">#</a> ends-with</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//ul<span class="token punctuation">[</span>@id<span class="token operator">=</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">]</span>/li/a<span class="token punctuation">[</span>ends-with<span class="token punctuation">(</span>@id, <span class="token string">&quot;uu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="css-选择器" tabindex="-1"><a class="header-anchor" href="#css-选择器" aria-hidden="true">#</a> CSS 选择器</h3><table><thead><tr><th>选择class :</th><th>#</th><th></th></tr></thead><tbody><tr><td>选择id :</td><td>.</td><td></td></tr><tr><td>选择标签属性</td><td>a::attr(href)</td><td></td></tr><tr><td>只需要标签里的文字内容</td><td>a::text</td><td></td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> i<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&#39;.odd a::text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取标签文本</span>
href <span class="token operator">=</span> i<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&#39;.odd a::attr(href)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取标签属性</span>
author <span class="token operator">=</span> i<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&#39;.odd:nth-child(3)::text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 如果有相同的，可以用:nth-child()来确定位置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://i.loli.net/2021/08/05/2T54ALUJ9XxOmK6.png" alt="image-20210805134201219" style="zoom:67%;"><p>css选择器结合正则表达式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>title <span class="token operator">=</span> selector.css<span class="token punctuation">(</span><span class="token string">&quot;title::text&quot;</span><span class="token punctuation">)</span>.re<span class="token punctuation">(</span><span class="token string">&quot;(\\S\\S)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
print title
<span class="token comment"># 百度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="文件路径操作" tabindex="-1"><a class="header-anchor" href="#文件路径操作" aria-hidden="true">#</a> 文件路径操作</h2><p>获取当前 py 文件的绝对路径：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>p1 <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span>
返回当前文件的绝对路径
存在软连接时<span class="token punctuation">,</span>返回软连接文件路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>p2 <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span>
返回当前文件的标准路径，而非软链接所在的路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><br><br></p><h2 id="操作-windows" tabindex="-1"><a class="header-anchor" href="#操作-windows" aria-hidden="true">#</a> 操作 Windows</h2><h3 id="操作剪贴板" tabindex="-1"><a class="header-anchor" href="#操作剪贴板" aria-hidden="true">#</a> 操作剪贴板</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> pyperclip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="调用-windows-api" tabindex="-1"><a class="header-anchor" href="#调用-windows-api" aria-hidden="true">#</a> 调用 Windows API</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> pypiwin32
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h4 id="根据窗口标题找窗口" tabindex="-1"><a class="header-anchor" href="#根据窗口标题找窗口" aria-hidden="true">#</a> 根据窗口标题找窗口</h4><br><h4 id="切换窗口" tabindex="-1"><a class="header-anchor" href="#切换窗口" aria-hidden="true">#</a> 切换窗口</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">switch_roles</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    功能: 切换窗口
    参数 hwnd: 窗口句柄, 十六进制的六位数字
    &quot;&quot;&quot;</span>
    ctypes<span class="token punctuation">.</span>windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>SwitchToThisWindow<span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
    win32gui<span class="token punctuation">.</span>ShowWindow<span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>SW_SHOWNORMAL<span class="token punctuation">)</span>
    win32gui<span class="token punctuation">.</span>SetForegroundWindow<span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="调用-windows-10-11-通知" tabindex="-1"><a class="header-anchor" href="#调用-windows-10-11-通知" aria-hidden="true">#</a> 调用 Windows 10 / 11 通知</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> win10toast
pip <span class="token function">install</span> win11toast
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><br><br></p><h2 id="第三方包的使用" tabindex="-1"><a class="header-anchor" href="#第三方包的使用" aria-hidden="true">#</a> 第三方包的使用</h2><h3 id="colorama" tabindex="-1"><a class="header-anchor" href="#colorama" aria-hidden="true">#</a> colorama</h3><blockquote><p>打印带颜色</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> pip <span class="token function">install</span> colorama
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> colorama <span class="token keyword">import</span> init<span class="token punctuation">,</span> Style<span class="token punctuation">,</span> Back<span class="token punctuation">,</span> Fore

<span class="token comment"># 初始化</span>
init<span class="token punctuation">(</span>autoreset<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>
    Style<span class="token punctuation">.</span>BRIGHT <span class="token operator">+</span> 
    Back<span class="token punctuation">.</span>YELLOW <span class="token operator">+</span>  
    Fore<span class="token punctuation">.</span>RED <span class="token operator">+</span> 
    <span class="token string">&quot;Colorama &quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="pyinstaller" tabindex="-1"><a class="header-anchor" href="#pyinstaller" aria-hidden="true">#</a> pyinstaller</h3><blockquote><p>将 Python 代码打包成可执行文件 .exe</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> pip <span class="token function">install</span> colorama
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img-blog.csdnimg.cn/c7cec848f3c847e785dc7a5bbec55527.png" alt="pyinstaller打包命令参数" loading="lazy"></p><br><h3 id="httpx" tabindex="-1"><a class="header-anchor" href="#httpx" aria-hidden="true">#</a> httpx</h3><blockquote><p>支持 http 2.0 的请求库</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> pip <span class="token function">install</span> httpx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> random <span class="token keyword">import</span> randint
<span class="token keyword">import</span> asyncio
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor
<span class="token keyword">from</span> httpx <span class="token keyword">import</span> AsyncClient


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">async</span> <span class="token keyword">with</span> AsyncClient<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> h<span class="token punctuation">:</span>  <span class="token comment"># 异步请求</span>
            res <span class="token operator">=</span> <span class="token keyword">await</span> h<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">&quot;https://www.70461.uk/getip.php&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> TimeoutError<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;连接超时&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>Request<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 创建10个任务</span>
    done<span class="token punctuation">,</span> pending <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 运行任务</span>


<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> thread<span class="token punctuation">:</span>
            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 创建100个线程</span>
                thread<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>main<span class="token punctuation">)</span>  <span class="token comment"># 提交任务</span>
        sleep<span class="token punctuation">(</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;运行出错&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="isort" tabindex="-1"><a class="header-anchor" href="#isort" aria-hidden="true">#</a> isort</h3><blockquote><p>自动整理 import</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> pip <span class="token function">install</span> isort
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="openpyxl" tabindex="-1"><a class="header-anchor" href="#openpyxl" aria-hidden="true">#</a> openpyxl</h3><blockquote><p>读写 Excel 文件 (.xlsx)</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> openpyxl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a href="!http://t.csdn.cn/PXF1i">参考</a></p><ol><li><p>打开 Excel 文件</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook
wb <span class="token operator">=</span> load_workbook<span class="token punctuation">(</span><span class="token string">&#39;./模板.xlsx&#39;</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> data_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>	<span class="token comment"># 只读、只读数据</span>
ws <span class="token operator">=</span> wb<span class="token punctuation">[</span>wb<span class="token punctuation">.</span>sheetnames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>	<span class="token comment"># 获取第一个工作表 选择表（sheet）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取最大行数、列数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>ws<span class="token punctuation">.</span>max_row
ws<span class="token punctuation">.</span>max_column
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>单元格访问</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>遍历</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">val</span> <span class="token keyword">in</span> ws_write.iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>:
    print<span class="token punctuation">(</span>val<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.value, val<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>.value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">row</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span>, ws.max_row + <span class="token number">1</span><span class="token punctuation">)</span>:
    print<span class="token punctuation">(</span>ws.cell<span class="token punctuation">(</span>row<span class="token operator">=</span>row, <span class="token assign-left variable">column</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>.value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><br><h3 id="pytorch" tabindex="-1"><a class="header-anchor" href="#pytorch" aria-hidden="true">#</a> PyTorch</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token assign-left variable">torch</span><span class="token operator">==</span><span class="token number">1.8</span>.0 <span class="token assign-left variable">torchvision</span><span class="token operator">==</span><span class="token number">0.9</span>.0 <span class="token assign-left variable">torchaudio</span><span class="token operator">==</span><span class="token number">0.8</span>.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><br><h2 id="进程、线程、进程池、线程池" tabindex="-1"><a class="header-anchor" href="#进程、线程、进程池、线程池" aria-hidden="true">#</a> 进程、线程、进程池、线程池</h2><h3 id="进程-process" tabindex="-1"><a class="header-anchor" href="#进程-process" aria-hidden="true">#</a> 进程 Process</h3><h4 id="进程的介绍" tabindex="-1"><a class="header-anchor" href="#进程的介绍" aria-hidden="true">#</a> 进程的介绍</h4><p>进程是实现多任务的一种方式。通俗地说，一个程序就相当于一个进程，一个进程又可以有许多的线程。</p><p>一般一个软件对应一个进程，但有些软件可以有多个进程，比如Chrome浏览器，每一个标签页就是一个进程。</p><p><img src="https://i.loli.net/2021/08/21/m2pif5Te9wM7sWk.png" alt="image-20210821224304395" loading="lazy"></p><p>也就是操作系统进行资源分配的基本单位，按软件进行分配。</p><p><img src="https://i.loli.net/2021/08/21/752AB9JLVZDGzOR.png" alt="image-20210821215141477" loading="lazy"></p><p>下图演示的是一个py文件创建3个进程，一个进程负责一个任务，那么就可以多任务执行了。</p><p><img src="https://i.loli.net/2021/08/21/6pwETNsX2mkBvon.png" alt="image-20210821224943087" loading="lazy"></p><h4 id="创建多进程" tabindex="-1"><a class="header-anchor" href="#创建多进程" aria-hidden="true">#</a> 创建多进程</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> multiprocessing <span class="token comment">#导入多任务处理包</span>

<span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;跳舞&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;唱歌&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span> <span class="token comment"># 主进程</span>
    <span class="token comment"># 创建进程</span>
    dance_process <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>dance<span class="token punctuation">)</span>
    sing_process <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>sing<span class="token punctuation">)</span>

    <span class="token comment"># 启动进程执行对应的任务，它们是同时执行的</span>
    dance_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sing_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当上面的代码运行时，会创建<strong>3个进程</strong>，一个主进程，2个子进程(dance，sing)</p><h4 id="获取当前进程的编号" tabindex="-1"><a class="header-anchor" href="#获取当前进程的编号" aria-hidden="true">#</a> 获取当前进程的编号</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;跳舞函数的编号是：&#39;</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;跳舞&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;唱歌函数的编号是：&#39;</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;唱歌&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获取父进程的编号" tabindex="-1"><a class="header-anchor" href="#获取父进程的编号" aria-hidden="true">#</a> 获取父进程的编号</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;跳舞函数的编号是：&#39;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;跳舞函数的父进程编号是：&#39;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;跳舞&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;唱歌函数的父进程编号是：&#39;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;唱歌函数的编号是：&#39;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;唱歌&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="开启进程给函数传参" tabindex="-1"><a class="header-anchor" href="#开启进程给函数传参" aria-hidden="true">#</a> 开启进程给函数传参</h4><p>方法一：利用args，传的是元组</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> sing_process <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>sing<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方法二：利用kwargs，传的是字典</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> sing_process <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>sing<span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;唱歌函数的父进程编号是：&#39;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;唱歌函数的编号是：&#39;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;唱歌&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;主进程的进程编号是&#39;</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 创建进程</span>
   
    sing_process <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>sing<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 用args，元组的形式传参，一个元素的元组，要加逗号</span>

    <span class="token comment"># 启动进程执行对应的任务</span>
    dance_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="进程注意事项" tabindex="-1"><a class="header-anchor" href="#进程注意事项" aria-hidden="true">#</a> 进程注意事项</h4><ul><li>进程之间不共享全局变量</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time
<span class="token keyword">import</span> multiprocessing
g_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 全局变量</span>

<span class="token keyword">def</span> <span class="token function">add_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 添加数据</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        g_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;添加数据&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 读取数据</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;读取数据&quot;</span><span class="token punctuation">,</span>g_list<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>g_list<span class="token punctuation">)</span> <span class="token comment"># 仍然是空</span>
    one_process <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>add_data<span class="token punctuation">)</span>
    two_process <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>read_data<span class="token punctuation">)</span>
    <span class="token comment"># 启动进程执行对应的任务</span>
    one_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    two_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
 虽然add_data<span class="token punctuation">(</span><span class="token punctuation">)</span> 添加了数据，但是在read_data<span class="token punctuation">(</span><span class="token punctuation">)</span>进程里g_list 仍然是空的，尽管主进程也是空的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>主进程会等待所有子进程结束才结束</li></ul><h4 id="进程池" tabindex="-1"><a class="header-anchor" href="#进程池" aria-hidden="true">#</a> 进程池</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> cocurrent<span class="token punctuation">.</span>fetures <span class="token keyword">import</span> ProcessPoolExecutor

<span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

pp <span class="token operator">=</span> ProcessPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    pp<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>function<span class="token punctuation">,</span> i<span class="token punctuation">)</span>

pp<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线程-thread" tabindex="-1"><a class="header-anchor" href="#线程-thread" aria-hidden="true">#</a> 线程 Thread</h3><h4 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h4><p>比如说百度网盘，下载是一个线程，上传也是一个线程，在线看视频也是一个线程，它们可以同时进行。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading <span class="token comment"># 导入线程包</span>

<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;当前线程&#39;</span><span class="token punctuation">,</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    
 <span class="token comment"># 创建多(子)线程的方式</span>
sub_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">)</span>

<span class="token comment"># 开启线程</span>
sub_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果待执行函数带有参数，则可以通过<em>args</em>和<em>kwargs</em> 来传参</p><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;跳舞&#39;</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
dance_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>dance<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 给函数传参，方法一</span>
dance_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>dance<span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;cout&#39;</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># 给函数传参，方法二,通过字典形式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于主线程会等待所有子线程执行结束再结束，有时候不方便，我们可以设置当主线程结束后，顺便将所有子线程也结束掉。</p><ul><li>方法一：在创建时设定daemon为True</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sub_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>show_info<span class="token punctuation">,</span> daemon<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 守护线程，主线程结束则所有子线程也结束</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>方法二：创建好之后使用setDeamon(True)即可</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> sub_thread<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池" aria-hidden="true">#</a> 线程池</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading

<span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">&#39;./csv_file&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>function<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> thr <span class="token keyword">in</span> threads<span class="token punctuation">:</span>
        thr<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        thr<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> cocurrent<span class="token punctuation">.</span>fetures <span class="token keyword">import</span> ThreadPoolExecutor

<span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

tp <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    tp<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>function<span class="token punctuation">,</span> i<span class="token punctuation">)</span>

tp<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="线程同步的方式" tabindex="-1"><a class="header-anchor" href="#线程同步的方式" aria-hidden="true">#</a> 线程同步的方式</h4><ul><li>方法一：线程等待</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sub_thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 表示sub_thread这个线程执行完成后再执行下一个线程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>方法二：互斥锁</li></ul><p>可以给线程加一个锁，每次使用先开锁，使用过程加上锁，这样别的线程就无法用。但是加上锁之后就变成了单任务了，同一时刻只有一个线程在执行任务，性能会降低。但是能保证多线程使用全局变量的时候不会出现错误。</p><h4 id="线程之间共享全局变量" tabindex="-1"><a class="header-anchor" href="#线程之间共享全局变量" aria-hidden="true">#</a> 线程之间共享全局变量</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>g_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 全局变量</span>

<span class="token keyword">def</span> <span class="token function">add_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        g_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;添加数据:&#39;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;读取数据:&#39;</span><span class="token punctuation">,</span>g_list<span class="token punctuation">)</span>
    
add_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>add_data<span class="token punctuation">)</span>
read_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>read_data<span class="token punctuation">)</span>
add_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
add_thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
read_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading <span class="token comment"># 导入线程包</span>

g_sum <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">def</span> <span class="token function">sum_num1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">global</span> g_sum
        g_sum <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;sum1&#39;</span><span class="token punctuation">,</span>g_sum<span class="token punctuation">)</span> 
        
<span class="token keyword">def</span> <span class="token function">sum_num2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">global</span> g_sum
        g_sum <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;sum2&#39;</span><span class="token punctuation">,</span>g_sum<span class="token punctuation">)</span> 
    
    one_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sum_num1<span class="token punctuation">)</span>
    two_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sum_num2<span class="token punctuation">)</span>
    one_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    one_thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 线程等待，这样都输出2000000</span>
    two_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="协程-coroutine" tabindex="-1"><a class="header-anchor" href="#协程-coroutine" aria-hidden="true">#</a> 协程 Coroutine</h3><h4 id="asyncio" tabindex="-1"><a class="header-anchor" href="#asyncio" aria-hidden="true">#</a> asyncio</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="进程和线程的对比" tabindex="-1"><a class="header-anchor" href="#进程和线程的对比" aria-hidden="true">#</a> 进程和线程的对比</h3><p>① 线程之间的执行是无序的,由操作系统去调度具体的线程，进程之前也是无序的</p><p>② 进程之间不会共享全局变量,线程之间共享全局变量</p><h3 id="多进程、多线程、多协程对比" tabindex="-1"><a class="header-anchor" href="#多进程、多线程、多协程对比" aria-hidden="true">#</a> 多进程、多线程、多协程对比</h3>`,160),d={href:"https://www.cnblogs.com/chichung/p/9566734.html",target:"_blank",rel:"noopener noreferrer"},r=a(`<p>一个进程可以启动N个线程</p><p>一个线程可以启动N个协程</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;多进程 Process (multiprocessing)&#39;&#39;&#39;</span>

	<span class="token operator">*</span> 优点：可以利用多核CPU进行并行运算
    <span class="token operator">*</span> 缺点：占用资源最多、可启动数目比线程少
    <span class="token operator">*</span> 适用于：CPU密集型计算
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;多线程 Thread (threading)&#39;&#39;&#39;</span>

	<span class="token operator">*</span> 优点：相比进程，更轻量级、占用资源少
    <span class="token operator">*</span> 缺点：
    		① 相比进程，多线程只能并发执行，不能利用多CPU（python有GIL）
        	② 相比协程，启动数目有限制，占用内存资源，有协程切换开销
    <span class="token operator">*</span> 适用于：IO密集型计算、同时运行的任务数目要求不多
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;多协程 Coroutine (asyncio)&#39;&#39;&#39;</span>

	<span class="token operator">*</span> 优点：内存开销最小、启动协程数量最多
    <span class="token operator">*</span> 缺点：支持的库有限制<span class="token punctuation">(</span>aiohttp vs requests<span class="token punctuation">)</span>、代码实现复杂
    <span class="token operator">*</span> 适用于：IO密集型计算、需要超多任务执行、但有现成库的场景
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="到底应该选择哪个来用" tabindex="-1"><a class="header-anchor" href="#到底应该选择哪个来用" aria-hidden="true">#</a> 到底应该选择哪个来用？</h3><p><img src="https://i.loli.net/2021/08/24/vgwC5S8mBWFjJu4.png" alt="image-20210824161057997" loading="lazy"></p><p><br><br></p><h2 id="web-框架" tabindex="-1"><a class="header-anchor" href="#web-框架" aria-hidden="true">#</a> Web 框架</h2><p>###　Django</p><p>python打开json文件</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;CoorOfXiaoqu.json&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_obj<span class="token punctuation">:</span>
	json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>result_dict<span class="token punctuation">,</span>file_obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>python保存json文件</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;文件名.json&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>数据<span class="token punctuation">,</span><span class="token builtin">file</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端根据url请求：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> lon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> coordinates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> lat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;这里放url路径&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;参数&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">async</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//  console.log(results);</span>
            <span class="token comment">// alert(results);</span>
            dataSource <span class="token operator">=</span> results<span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> results<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 lat<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                 lon<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>  results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表单</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>    <span class="token comment">&lt;!-- 表单 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/test/test1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
       <span class="token comment">&lt;!-- {% csrf_token %}--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test-button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域" aria-hidden="true">#</a> 跨域</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> django-cors-headers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><kbd>settings.py</kbd></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 跨域设置</span>
CORS_ALLOW_CREDENTIALS<span class="token operator">=</span><span class="token boolean">True</span>
CORS_ORIGIN_ALLOW_ALL<span class="token operator">=</span><span class="token boolean">True</span>

<span class="token comment"># 以安装的应用</span>
INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;corsheaders&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">]</span>

MIDDLEWARE <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment"># 定义跨域中间件</span>
    <span class="token string">&#39;corsheaders.middleware.CorsMiddleware&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;django.middleware.common.CommonMiddleware&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置局域网访问" tabindex="-1"><a class="header-anchor" href="#配置局域网访问" aria-hidden="true">#</a> 配置局域网访问</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>ALLOWED_HOSTS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="配置安装的app" tabindex="-1"><a class="header-anchor" href="#配置安装的app" aria-hidden="true">#</a> 配置安装的APP</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;django.contrib.admin&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;django.contrib.auth&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;django.contrib.contenttypes&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;django.contrib.sessions&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;django.contrib.messages&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;django.contrib.staticfiles&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;gis&#39;</span><span class="token punctuation">,</span> <span class="token comment">#自己新建的APP，要添加进来</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置数据库" tabindex="-1"><a class="header-anchor" href="#配置数据库" aria-hidden="true">#</a> 配置数据库</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 数据库使用PostgreSQL</span>
DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;default&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;ENGINE&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;django.db.backends.postgresql_psycopg2&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;NAME&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;citygis&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;USER&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;postgres&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;PASSWORD&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;HOST&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;PORT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;5432&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 数据库使用MySQL</span>
DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token string">&#39;default&#39;</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
      <span class="token string">&#39;ENGINE&#39;</span> <span class="token punctuation">:</span> <span class="token string">&#39;django.db.backends.mysql&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;USER&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;PASSWORD&#39;</span> <span class="token punctuation">:</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;NAME&#39;</span> <span class="token punctuation">:</span> <span class="token string">&#39;citygis&#39;</span><span class="token punctuation">,</span><span class="token comment">#数据库名</span>
      <span class="token string">&#39;HOST&#39;</span> <span class="token punctuation">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;PORT&#39;</span> <span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
      <span class="token string">&#39;CHARSET&#39;</span> <span class="token punctuation">:</span> <span class="token string">&#39;utff-8&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 数据库使用SQLite----默认就是用这个</span>
DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token string">&#39;default&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&#39;ENGINE&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;django.db.backends.sqlite3&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;NAME&#39;</span><span class="token punctuation">:</span> BASE_DIR <span class="token operator">/</span> <span class="token string">&#39;db.sqlite3&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成要迁移数据库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="配置语言和时区" tabindex="-1"><a class="header-anchor" href="#配置语言和时区" aria-hidden="true">#</a> 配置语言和时区</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">&#39;zh-hans&#39;</span>

TIME_ZONE <span class="token operator">=</span> <span class="token string">&#39;Asia/Shanghai&#39;</span>

USE_I18N <span class="token operator">=</span> <span class="token boolean">True</span>

USE_L10N <span class="token operator">=</span> <span class="token boolean">True</span>

USE_TZ <span class="token operator">=</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置静态模板" tabindex="-1"><a class="header-anchor" href="#配置静态模板" aria-hidden="true">#</a> 配置静态模板</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 静态文件配置</span>

STATIC_URL <span class="token operator">=</span> <span class="token string">&#39;/static/&#39;</span>  <span class="token comment"># 别名</span>
STATICFILES_DIRS <span class="token operator">=</span> <span class="token punctuation">(</span>
    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">&#39;app1/templates/static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token comment"># Static files (CSS, JavaScript, Images)</span>
<span class="token comment"># https://docs.djangoproject.com/en/3.2/howto/static-files/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="模板html写法" tabindex="-1"><a class="header-anchor" href="#模板html写法" aria-hidden="true">#</a> 模板HTML写法</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% load static %}  
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{% static &#39;css/style.css&#39; %}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{% static &#39;js/script.js&#39; %}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="上传文件并解析内容" tabindex="-1"><a class="header-anchor" href="#上传文件并解析内容" aria-hidden="true">#</a> 上传文件并解析内容</h3><p>利用表单，上传文件，</p><p>​ <em>acition:文件上传的地址，后台需要实现对应接口</em></p><p>​ <em>method：数据提交的方式，必须为POST</em></p><p>​ <em>enctype：发送数据类型，上传文件时必须为multipart/form-data</em></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>upload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>upload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://127.0.0.1:8000/api/show<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>upload_file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file_id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.json<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--name是必须的，后面可以价格multiple表示多选文件--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>map<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>map<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后端处理数据，利用<code> request.FILES.get(&quot;upload_file&quot;)</code>,获取上传的文件</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    received_file <span class="token operator">=</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;upload_file&quot;</span><span class="token punctuation">)</span> <span class="token comment"># upload_name是input按钮的name，必须一样</span>
    filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>MEDIA_ROOT<span class="token punctuation">,</span> received_file<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

    saveFile<span class="token punctuation">(</span>received_file<span class="token punctuation">,</span>filename<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token string">&#39;result&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;OK&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
        <span class="token string">&#39;filename&#39;</span><span class="token punctuation">:</span> received_file<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
        <span class="token string">&#39;length&#39;</span><span class="token punctuation">:</span> received_file<span class="token punctuation">.</span>size<span class="token punctuation">,</span>
        <span class="token string">&#39;content&#39;</span><span class="token punctuation">:</span> readFile<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 保存上传的文件</span>
<span class="token keyword">def</span> <span class="token function">saveFile</span><span class="token punctuation">(</span>received_file<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>received_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># ff = open(filename,&#39;wb&#39;)</span>
    <span class="token comment"># for chunk in received_file.chunks():</span>
    <span class="token comment">#     ff.write(chunk)</span>
    <span class="token comment"># ff.close()</span>

<span class="token comment"># 读取上传的文件内容，并返回</span>
<span class="token keyword">def</span> <span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>
        content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> content
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br><br></p><h2 id="shodan" tabindex="-1"><a class="header-anchor" href="#shodan" aria-hidden="true">#</a> Shodan</h2>`,48),k={href:"https://mp.weixin.qq.com/s/ubJ_3EDT34ao4m_quJQmQA",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>Shodan 爬取的是互联网上所有设备的 IP 地址及其端口号。</p><p><img src="https://i.loli.net/2021/06/09/R4rGPENmaUxJY6c.png" alt="image-20210609204952964" loading="lazy"></p><h3 id="使用python联合shodan进行搜索" tabindex="-1"><a class="header-anchor" href="#使用python联合shodan进行搜索" aria-hidden="true">#</a> 使用python联合Shodan进行搜索</h3><p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> shodan
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注册账号获取API</p>`,6),m={href:"https://account.shodan.io/register",target:"_blank",rel:"noopener noreferrer"},b=a(`<p>输入完相关信息，点击 CREATE 会跳转到个人账户页，此时 API Key 会显示你的API秘钥，请记录这个秘钥，后续会使用到这个秘钥去请求接口。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> shodan <span class="token keyword">import</span> Shodan

api <span class="token operator">=</span> Shodan<span class="token punctuation">(</span><span class="token string">&#39;你的API KEY&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">search_shodan</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 调用搜索接口</span>
    result <span class="token operator">=</span> api<span class="token punctuation">.</span>search<span class="token punctuation">(</span>keyword<span class="token punctuation">)</span>

    <span class="token comment"># 显示所有IP</span>
    <span class="token keyword">for</span> service <span class="token keyword">in</span> result<span class="token punctuation">[</span><span class="token string">&#39;matches&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>service<span class="token punctuation">[</span><span class="token string">&#39;ip_str&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

search_shodan<span class="token punctuation">(</span><span class="token string">&quot;Hikvision-Webs&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://mmbiz.qpic.cn/mmbiz_png/h6NqozYcCQ6pGb1DIl1Kn2ZS0rEribiboRuSNw4LCQqoRt8icpgBChXrBQTXNEUxwtPsyF36FKETfzr5hJ5F3eo4A/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="123" loading="lazy"></p>`,3);function h(g,y){const t=c("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[n("a",d,[s("参考教程"),e(t)])]),r,n("p",null,[s("参考教程："),n("a",k,[s("https://mp.weixin.qq.com/s/ubJ_3EDT34ao4m_quJQmQA"),e(t)])]),v,n("p",null,[s("注册网址："),n("a",m,[s("https://account.shodan.io/register"),e(t)])]),b])}const f=p(l,[["render",h],["__file","Python.html.vue"]]);export{f as default};

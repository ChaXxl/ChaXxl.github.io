import{_ as n,X as a,Y as s,a1 as e}from"./framework-dbbbcf5d.js";const t={},p=e(`<h1 id="cc-八股" tabindex="-1"><a class="header-anchor" href="#cc-八股" aria-hidden="true">#</a> CC++ 八股</h1><h2 id="一-c-基础" tabindex="-1"><a class="header-anchor" href="#一-c-基础" aria-hidden="true">#</a> 一. C++ 基础</h2><h3 id="_1-1-c-三大待性" tabindex="-1"><a class="header-anchor" href="#_1-1-c-三大待性" aria-hidden="true">#</a> 1.1 C++ 三大待性</h3><h4 id="_1-1-1-访问权限" tabindex="-1"><a class="header-anchor" href="#_1-1-1-访问权限" aria-hidden="true">#</a> 1.1.1 访问权限</h4><blockquote><p>C++ 通过 public、protected、private 三个关键字来控制成员变量和成员函数的访问权限，它们分别表示公有的、受保护的、私有的，被称为成员访问限定符。</p></blockquote><p><br><br></p><h4 id="_1-1-2-封装" tabindex="-1"><a class="header-anchor" href="#_1-1-2-封装" aria-hidden="true">#</a> 1.1.2 封装</h4><p><br><br></p><h4 id="_1-1-3-继承" tabindex="-1"><a class="header-anchor" href="#_1-1-3-继承" aria-hidden="true">#</a> 1.1.3 继承</h4><p><br><br></p><h4 id="_1-1-4-多态" tabindex="-1"><a class="header-anchor" href="#_1-1-4-多态" aria-hidden="true">#</a> 1.1.4 多态</h4><p>多态实现原理</p><p><br><br></p><h4 id="_1-1-5-递归如何避免爆栈" tabindex="-1"><a class="header-anchor" href="#_1-1-5-递归如何避免爆栈" aria-hidden="true">#</a> 1.1.5 递归如何避免爆栈</h4><p><br><br></p><h3 id="_1-2数据类型" tabindex="-1"><a class="header-anchor" href="#_1-2数据类型" aria-hidden="true">#</a> 1.2数据类型</h3><p><br><br></p><h3 id="_1-3-指针和引用" tabindex="-1"><a class="header-anchor" href="#_1-3-指针和引用" aria-hidden="true">#</a> 1.3 指针和引用</h3><p><br><br></p><h3 id="_1-4-关键字" tabindex="-1"><a class="header-anchor" href="#_1-4-关键字" aria-hidden="true">#</a> 1.4 关键字</h3><h4 id="_1-4-1-const" tabindex="-1"><a class="header-anchor" href="#_1-4-1-const" aria-hidden="true">#</a> 1.4.1 const</h4><br><h4 id="_1-4-2-define-和-typedef-的区别" tabindex="-1"><a class="header-anchor" href="#_1-4-2-define-和-typedef-的区别" aria-hidden="true">#</a> 1.4.2 define 和 typedef 的区别</h4><br><h4 id="_1-4-3-define-和-inline-的区别" tabindex="-1"><a class="header-anchor" href="#_1-4-3-define-和-inline-的区别" aria-hidden="true">#</a> 1.4.3 define 和 inline 的区别</h4><br><h4 id="_1-4-4-override-和-overload" tabindex="-1"><a class="header-anchor" href="#_1-4-4-override-和-overload" aria-hidden="true">#</a> 1.4.4 override 和 overload</h4><br><h4 id="_1-4-5-new-和-malloc" tabindex="-1"><a class="header-anchor" href="#_1-4-5-new-和-malloc" aria-hidden="true">#</a> 1.4.5 new 和 malloc</h4><br><h4 id="_1-4-6-constexpr-和-const" tabindex="-1"><a class="header-anchor" href="#_1-4-6-constexpr-和-const" aria-hidden="true">#</a> 1.4.6 constexpr 和 const</h4><br><h4 id="_1-4-7-volatile" tabindex="-1"><a class="header-anchor" href="#_1-4-7-volatile" aria-hidden="true">#</a> 1.4.7 volatile</h4><br><h4 id="_1-4-8-extern" tabindex="-1"><a class="header-anchor" href="#_1-4-8-extern" aria-hidden="true">#</a> 1.4.8 extern</h4><br><h4 id="_1-4-9-static" tabindex="-1"><a class="header-anchor" href="#_1-4-9-static" aria-hidden="true">#</a> 1.4.9 static</h4><br><h4 id="_1-4-10-前置-与-后置" tabindex="-1"><a class="header-anchor" href="#_1-4-10-前置-与-后置" aria-hidden="true">#</a> 1.4.10 前置++ 与 后置++</h4><br><h4 id="_1-4-11-std-atomic" tabindex="-1"><a class="header-anchor" href="#_1-4-11-std-atomic" aria-hidden="true">#</a> 1.4.11 std::atomic</h4><p><br><br></p><h3 id="_1-5-c-强制类型转换" tabindex="-1"><a class="header-anchor" href="#_1-5-c-强制类型转换" aria-hidden="true">#</a> 1.5 C++ 强制类型转换</h3><h4 id="_1-5-1-static-cast" tabindex="-1"><a class="header-anchor" href="#_1-5-1-static-cast" aria-hidden="true">#</a> 1.5.1 static_cast</h4><br><h4 id="_1-5-2-dynamic-cast" tabindex="-1"><a class="header-anchor" href="#_1-5-2-dynamic-cast" aria-hidden="true">#</a> 1.5.2 dynamic_cast</h4><br><h4 id="_1-5-3-reinterpret-cast" tabindex="-1"><a class="header-anchor" href="#_1-5-3-reinterpret-cast" aria-hidden="true">#</a> 1.5.3 reinterpret_cast</h4><br><h4 id="_1-5-4-const-cast" tabindex="-1"><a class="header-anchor" href="#_1-5-4-const-cast" aria-hidden="true">#</a> 1.5.4 const_cast</h4><p><br><br></p><h3 id="_1-6-运算符重载" tabindex="-1"><a class="header-anchor" href="#_1-6-运算符重载" aria-hidden="true">#</a> 1.6 运算符重载</h3><p><br><br><br></p><h3 id="_1-7-c-内存模型" tabindex="-1"><a class="header-anchor" href="#_1-7-c-内存模型" aria-hidden="true">#</a> 1.7 C++ 内存模型</h3><h4 id="_1-7-1-字符串操作函数" tabindex="-1"><a class="header-anchor" href="#_1-7-1-字符串操作函数" aria-hidden="true">#</a> 1.7.1 字符串操作函数</h4><br><h4 id="_1-7-2-内存泄漏" tabindex="-1"><a class="header-anchor" href="#_1-7-2-内存泄漏" aria-hidden="true">#</a> 1.7.2 内存泄漏</h4><br><h4 id="_1-7-3-测试题目" tabindex="-1"><a class="header-anchor" href="#_1-7-3-测试题目" aria-hidden="true">#</a> 1.7.3 测试题目</h4><p><br><br><br></p><h3 id="_1-8-计算机中的乱序执行" tabindex="-1"><a class="header-anchor" href="#_1-8-计算机中的乱序执行" aria-hidden="true">#</a> 1.8 计算机中的乱序执行</h3><h4 id="_1-8-1-副作用" tabindex="-1"><a class="header-anchor" href="#_1-8-1-副作用" aria-hidden="true">#</a> 1.8.1 副作用</h4><br><h4 id="_1-8-2-信号量" tabindex="-1"><a class="header-anchor" href="#_1-8-2-信号量" aria-hidden="true">#</a> 1.8.2 信号量</h4><br><h4 id="_1-8-3-future-库" tabindex="-1"><a class="header-anchor" href="#_1-8-3-future-库" aria-hidden="true">#</a> 1.8.3 future 库</h4><p><br><br><br></p><h2 id="二-c-stl" tabindex="-1"><a class="header-anchor" href="#二-c-stl" aria-hidden="true">#</a> 二. C++ STL</h2><h3 id="_2-1-stl实现原理及其实现" tabindex="-1"><a class="header-anchor" href="#_2-1-stl实现原理及其实现" aria-hidden="true">#</a> 2.1 STL实现原理及其实现</h3><h4 id="_2-1-1-容器" tabindex="-1"><a class="header-anchor" href="#_2-1-1-容器" aria-hidden="true">#</a> 2.1.1 容器</h4><br><h4 id="_2-1-2-算法" tabindex="-1"><a class="header-anchor" href="#_2-1-2-算法" aria-hidden="true">#</a> 2.1.2 算法</h4><br><h4 id="_2-1-3-迭代器" tabindex="-1"><a class="header-anchor" href="#_2-1-3-迭代器" aria-hidden="true">#</a> 2.1.3 迭代器</h4><br><h4 id="_2-1-4-仿函数" tabindex="-1"><a class="header-anchor" href="#_2-1-4-仿函数" aria-hidden="true">#</a> 2.1.4 仿函数</h4><br><h4 id="_2-1-5-适配器" tabindex="-1"><a class="header-anchor" href="#_2-1-5-适配器" aria-hidden="true">#</a> 2.1.5 适配器</h4><br><h4 id="_2-1-5-空间配置器" tabindex="-1"><a class="header-anchor" href="#_2-1-5-空间配置器" aria-hidden="true">#</a> 2.1.5 空间配置器</h4><br><h4 id="_2-1-6-stl-的优点" tabindex="-1"><a class="header-anchor" href="#_2-1-6-stl-的优点" aria-hidden="true">#</a> 2.1.6 STL 的优点</h4><p><br><br></p><h3 id="_2-2-pair-容器" tabindex="-1"><a class="header-anchor" href="#_2-2-pair-容器" aria-hidden="true">#</a> 2.2 pair 容器</h3><p><br><br></p><h3 id="_2-3-vector-容器实现与扩充" tabindex="-1"><a class="header-anchor" href="#_2-3-vector-容器实现与扩充" aria-hidden="true">#</a> 2.3 vector 容器实现与扩充</h3><h4 id="_2-3-1-底层实现" tabindex="-1"><a class="header-anchor" href="#_2-3-1-底层实现" aria-hidden="true">#</a> 2.3.1 底层实现</h4><br><h4 id="_2-3-2-扩容过程" tabindex="-1"><a class="header-anchor" href="#_2-3-2-扩容过程" aria-hidden="true">#</a> 2.3.2 扩容过程</h4><br><h4 id="_2-3-3-vector-源码" tabindex="-1"><a class="header-anchor" href="#_2-3-3-vector-源码" aria-hidden="true">#</a> 2.3.3 vector 源码</h4><p><br><br></p><h3 id="_2-4-list" tabindex="-1"><a class="header-anchor" href="#_2-4-list" aria-hidden="true">#</a> 2.4 list</h3><h4 id="_2-4-1-list-设计" tabindex="-1"><a class="header-anchor" href="#_2-4-1-list-设计" aria-hidden="true">#</a> 2.4.1 list 设计</h4><br><h4 id="_2-4-2-vector-和-list-的区别" tabindex="-1"><a class="header-anchor" href="#_2-4-2-vector-和-list-的区别" aria-hidden="true">#</a> 2.4.2 vector 和 list 的区别</h4><p><br><br></p><h3 id="_2-5-deque" tabindex="-1"><a class="header-anchor" href="#_2-5-deque" aria-hidden="true">#</a> 2.5 deque</h3><p><br><br></p><h3 id="_2-6-stack-queue" tabindex="-1"><a class="header-anchor" href="#_2-6-stack-queue" aria-hidden="true">#</a> 2.6 stack &amp;&amp; queue</h3><p>源码</p><p><br><br></p><h3 id="_2-7-heap-priority-queue" tabindex="-1"><a class="header-anchor" href="#_2-7-heap-priority-queue" aria-hidden="true">#</a> 2.7 heap &amp;&amp; priority_queue</h3><p><br><br></p><h3 id="_2-8-map-set" tabindex="-1"><a class="header-anchor" href="#_2-8-map-set" aria-hidden="true">#</a> 2.8 map &amp;&amp; set</h3><p><br><br></p><h3 id="_2-9-map-unordered-map" tabindex="-1"><a class="header-anchor" href="#_2-9-map-unordered-map" aria-hidden="true">#</a> 2.9 map &amp;&amp; unordered_map</h3><p><br><br></p><h3 id="_2-10-sort-为什么可以避免爆栈" tabindex="-1"><a class="header-anchor" href="#_2-10-sort-为什么可以避免爆栈" aria-hidden="true">#</a> 2.10 sort 为什么可以避免爆栈</h3><p><br><br><br></p><h2 id="三-c-泛型编程" tabindex="-1"><a class="header-anchor" href="#三-c-泛型编程" aria-hidden="true">#</a> 三. C++泛型编程</h2><p>C++ 模板全特化和偏特化</p><p><br><br></p><p><br><br></p><p><br><br></p><p><br><br></p><p><br><br></p><p><br><br></p><p><br><br></p><p><br><br></p><p><br><br></p><p><br><br><br></p><h2 id="四-c-新特性" tabindex="-1"><a class="header-anchor" href="#四-c-新特性" aria-hidden="true">#</a> 四. C++ 新特性</h2><h3 id="_4-1-智能指针" tabindex="-1"><a class="header-anchor" href="#_4-1-智能指针" aria-hidden="true">#</a> 4.1 智能指针</h3><h4 id="_4-1-1-shared-ptr" tabindex="-1"><a class="header-anchor" href="#_4-1-1-shared-ptr" aria-hidden="true">#</a> 4.1.1 shared_ptr</h4><br><h4 id="_4-1-2-unique-ptr" tabindex="-1"><a class="header-anchor" href="#_4-1-2-unique-ptr" aria-hidden="true">#</a> 4.1.2 unique_ptr</h4><br><h4 id="_4-1-3-weak-ptr" tabindex="-1"><a class="header-anchor" href="#_4-1-3-weak-ptr" aria-hidden="true">#</a> 4.1.3 weak_ptr</h4><p><br><br></p><h3 id="_4-2-类型推导" tabindex="-1"><a class="header-anchor" href="#_4-2-类型推导" aria-hidden="true">#</a> 4.2 类型推导</h3><p><br><br></p><h3 id="_4-3-右值引用" tabindex="-1"><a class="header-anchor" href="#_4-3-右值引用" aria-hidden="true">#</a> 4.3 右值引用</h3><p><br><br></p><h3 id="_4-4-nullptr" tabindex="-1"><a class="header-anchor" href="#_4-4-nullptr" aria-hidden="true">#</a> 4.4 nullptr</h3><p><br><br></p><h3 id="_4-5-范围-for-循环" tabindex="-1"><a class="header-anchor" href="#_4-5-范围-for-循环" aria-hidden="true">#</a> 4.5 范围 for 循环</h3><p><br><br></p><h3 id="_4-6-列表初始化" tabindex="-1"><a class="header-anchor" href="#_4-6-列表初始化" aria-hidden="true">#</a> 4.6 列表初始化</h3><p><br><br></p><h3 id="_4-7-lambda-表达式" tabindex="-1"><a class="header-anchor" href="#_4-7-lambda-表达式" aria-hidden="true">#</a> 4.7 lambda 表达式</h3><p><br><br></p><h3 id="_4-8-并发" tabindex="-1"><a class="header-anchor" href="#_4-8-并发" aria-hidden="true">#</a> 4.8 并发</h3><h4 id="_4-8-1-std-thread" tabindex="-1"><a class="header-anchor" href="#_4-8-1-std-thread" aria-hidden="true">#</a> 4.8.1 std::thread</h4><br><h4 id="_4-8-2-lock-guard" tabindex="-1"><a class="header-anchor" href="#_4-8-2-lock-guard" aria-hidden="true">#</a> 4.8.2 lock_guard</h4><br><h4 id="_4-8-3-unique-lock" tabindex="-1"><a class="header-anchor" href="#_4-8-3-unique-lock" aria-hidden="true">#</a> 4.8.3 unique_lock</h4><h4 id="_4-8-4-线程安全的有界缓冲区" tabindex="-1"><a class="header-anchor" href="#_4-8-4-线程安全的有界缓冲区" aria-hidden="true">#</a> 4.8.4 线程安全的有界缓冲区</h4><blockquote><p>用模板类实现线程安全的有界缓冲区，实现 push、pop、size 函数。缓冲区线程安全，支持多个生产者、消费者同时操作，使用 C++11 或者更高的线程同步机制。</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex&gt;</span></span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">BoundedBuffer</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">BoundedBuffer</span><span class="token punctuation">(</span>size_t max_size<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">size_</span><span class="token punctuation">(</span>max_size<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// 防止意外的对象拷贝导致的数据竞争问题, 删除拷贝构造函数</span>
    <span class="token function">BoundedBuffer</span><span class="token punctuation">(</span><span class="token keyword">const</span> BoundedBuffer <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

    <span class="token comment">// 防止意外的对象拷贝导致的数据竞争问题, 删除拷贝赋值运算符</span>
    BoundedBuffer <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> BoundedBuffer <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 等待直到队列有空间</span>
        not_full_<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> buffer_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> size_<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        buffer_<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 通知消费者有新数据</span>
        not_empty_<span class="token punctuation">.</span><span class="token function">notify_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    T <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 等待直到队列不为空</span>
        not_empty_<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">!</span>buffer_<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        T value <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>buffer_<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buffer_<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 通知生产者有新空间</span>
        not_full_<span class="token punctuation">.</span><span class="token function">notify_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    size_t <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> buffer_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>queue<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> buffer_<span class="token punctuation">;</span>              <span class="token comment">// 存储数据的缓冲区</span>
    <span class="token keyword">const</span> size_t size_<span class="token punctuation">;</span>                 <span class="token comment">// 缓冲区的容量</span>
    <span class="token keyword">mutable</span> std<span class="token double-colon punctuation">::</span>mutex mutex_<span class="token punctuation">;</span>          <span class="token comment">// 互斥量</span>
    std<span class="token double-colon punctuation">::</span>condition_variable not_full_<span class="token punctuation">;</span>  <span class="token comment">// 缓冲区不满条件变量</span>
    std<span class="token double-colon punctuation">::</span>condition_variable not_empty_<span class="token punctuation">;</span> <span class="token comment">// 缓冲区非空条件变量</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    BoundedBuffer<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建容量为 5 的缓冲区</span>

    <span class="token keyword">auto</span> producer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            buffer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; - &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;生产了: &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
            std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">auto</span> consumer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> value <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; - &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;消费了: &quot;</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
            std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建 3 个生产者和 2 个消费者</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>thread<span class="token operator">&gt;</span> threads<span class="token punctuation">;</span>

    <span class="token comment">// 生产者线程</span>
    threads<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    threads<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    threads<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 消费者线程</span>
    threads<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    threads<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 等待所有线程完成</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>thread<span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br><br><br></p><h2 id="五-effective-stl" tabindex="-1"><a class="header-anchor" href="#五-effective-stl" aria-hidden="true">#</a> 五. Effective STL</h2><p><br><br><br></p><h2 id="六-effective-c" tabindex="-1"><a class="header-anchor" href="#六-effective-c" aria-hidden="true">#</a> 六. Effective C++</h2>`,155),o=[p];function c(i,r){return a(),s("div",null,o)}const u=n(t,[["render",c],["__file","CC__.html.vue"]]);export{u as default};

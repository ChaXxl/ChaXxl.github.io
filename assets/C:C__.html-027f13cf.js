import{_ as c,X as r,Y as p,Z as a,$ as n,a0 as s,a1 as i,a2 as t,F as d}from"./framework-c5cbeb87.js";const o={},u=a("h1",{id:"c-c",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#c-c","aria-hidden":"true"},"#"),n(" C/C++")],-1),v=a("h1",{id:"c-编程习惯与编程要点",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#c-编程习惯与编程要点","aria-hidden":"true"},"#"),n(" C++编程习惯与编程要点")],-1),h={href:"https://mp.weixin.qq.com/s/eFFc74OpA1ca2LlCB94Siw",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="代码注释" tabindex="-1"><a class="header-anchor" href="#代码注释" aria-hidden="true">#</a> 代码注释</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>/**
 *  每一行都用一个*开始
 *  写好注释
 */
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>/* */ 不能嵌套使用</p><br><h2 id="腾讯代码安全指南" tabindex="-1"><a class="header-anchor" href="#腾讯代码安全指南" aria-hidden="true">#</a> 腾讯代码安全指南</h2>`,5),m={href:"https://github.com/Tencent/secguide",target:"_blank",rel:"noopener noreferrer"},k=t(`<img src="https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruyS5CyyJutW7LMuQk5q5CnR85h5AvG6fywMAPwppYAgJOq7srjPqibtGu5I9wPz8KGs6rkeCcgyxKw/640?wx_fmt=png&amp;wxfrom=13&amp;wx_lazy=1&amp;wx_co=1&amp;tp=wxpic" style="zoom:67%;"><br><h1 id="零散笔记" tabindex="-1"><a class="header-anchor" href="#零散笔记" aria-hidden="true">#</a> 零散笔记</h1><h2 id="字符转数字" tabindex="-1"><a class="header-anchor" href="#字符转数字" aria-hidden="true">#</a> 字符转数字</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token function">atof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 转成浮点型</span>
  
<span class="token function">atoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 转成int型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="纯字符串-去掉转义" tabindex="-1"><a class="header-anchor" href="#纯字符串-去掉转义" aria-hidden="true">#</a> 纯字符串，去掉转义</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>std::string str = R&quot;(aaaa\\t\\nbbbb)&quot;;
std::cout &lt;&lt; str &lt;&lt; std::endl;	// aaaa\\t\\nbbbb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="常量指针和指针常量" tabindex="-1"><a class="header-anchor" href="#常量指针和指针常量" aria-hidden="true">#</a> 常量指针和指针常量</h2><ol><li><p>常量指针</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>指针指向的内容是常量</p></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>const int *p = &amp;a;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><br><ol start="2"><li><p>指针常量</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>指针是个常量</p></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>int * const p = &amp;a;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br></li></ol><h2 id="自增和自减" tabindex="-1"><a class="header-anchor" href="#自增和自减" aria-hidden="true">#</a> 自增和自减</h2><h3 id="i" tabindex="-1"><a class="header-anchor" href="#i" aria-hidden="true">#</a> i++</h3><p>先运算，再自增</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>x = i++;   //先让x变成i的值1，再让i加1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="i-1" tabindex="-1"><a class="header-anchor" href="#i-1" aria-hidden="true">#</a> ++i</h3><p>先自增，再运算</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>x = ++i;   //先让i加1, 再让x变成i的值1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="睡眠" tabindex="-1"><a class="header-anchor" href="#睡眠" aria-hidden="true">#</a> 睡眠</h2><p>Windows下</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include &lt;windos.h&gt;
Sleep(500); // 单位：毫秒
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Linux下</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include &lt;unistd.h&gt;
sleep(5); // 单位：秒
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通用：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include &lt;thread&gt;
this_thread::sleep_for(chrono::seconds(1))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="静态链表" tabindex="-1"><a class="header-anchor" href="#静态链表" aria-hidden="true">#</a> 静态链表</h2><p>定义<kbd>用数组来描述链表叫做静态链表</kbd></p>`,31),g=t(`<table><thead><tr><th style="text-align:center;">游标</th><th style="text-align:center;">5</th><th style="text-align:center;">2</th><th style="text-align:center;">3</th><th style="text-align:center;">4</th><th style="text-align:center;">5</th><th style="text-align:center;">6</th><th style="text-align:center;">7</th><th style="text-align:center;">...</th><th style="text-align:center;">1</th></tr></thead><tbody><tr><td style="text-align:center;">数据</td><td style="text-align:center;"></td><td style="text-align:center;">A</td><td style="text-align:center;">C</td><td style="text-align:center;">D</td><td style="text-align:center;">E</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">...</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">下标</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td><td style="text-align:center;">6</td><td style="text-align:center;">...</td><td style="text-align:center;">999</td></tr></tbody></table><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#define MAXSIZE 100
typedef struct {
	string data; //数据
	int cur; //游标Cursor
}StaticLinkList[MAXSIZE];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>则对链表进行初始化相当于初始化数组：</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>StaticLinkList s = {
	{&quot;a&quot;,1},
	{&quot;b&quot;,2},
    {&quot;c&quot;,0} //最后一个元素的cursor指向0
};
int i = 0;
do {
	cout &lt;&lt; s[i].data &lt;&lt; endl;
	i = s[i].cur;
} while (i);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="获取链表长度" tabindex="-1"><a class="header-anchor" href="#获取链表长度" aria-hidden="true">#</a> 获取链表长度</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>int length(StaticLinkList s) {
	int count = 0,i = 0;
	do {
		i = s[i].cur;
		count++;
	} while (i);
	return count;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="静态链表的插入操作" tabindex="-1"><a class="header-anchor" href="#静态链表的插入操作" aria-hidden="true">#</a> 静态链表的插入操作</h3><p>比如要把B插入A的后面，则</p>`,10),x=t(`<p><img src="https://i.loli.net/2021/06/26/E1BfxFT3NRshIzg.png#pic_center" alt="静态链表插入数据" loading="lazy"></p><br><h3 id="静态链表的删除操作" tabindex="-1"><a class="header-anchor" href="#静态链表的删除操作" aria-hidden="true">#</a> 静态链表的删除操作</h3><p>把要插入位置的前一个cursor指向下标为插入位置的cursor即可</p><br><h3 id="实操案例" tabindex="-1"><a class="header-anchor" href="#实操案例" aria-hidden="true">#</a> 实操案例</h3><p>写一个完整的程序，实现随机生成20个元素的链表（尾插法、头插法任意），用快速查找法快速查找中间节点的值并显示</p><p>快速查找法：利用快慢指针原理：</p><p>设置连个节点<code>*serch、*mid</code>，都指向单链表的头节点，其中<code>*serch</code>的移动速度是<code>*min</code>的2倍。当<code>*search</code>指向末尾节点的时候，min就正好在中间了，这也是标尺的思想。</p><p><img src="https://i.loli.net/2021/06/26/iOMRjJK8hbVFGsl.png" alt="image-20210626221152454" loading="lazy"></p><h1 id="stl" tabindex="-1"><a class="header-anchor" href="#stl" aria-hidden="true">#</a> STL</h1><h2 id="容器" tabindex="-1"><a class="header-anchor" href="#容器" aria-hidden="true">#</a> 容器</h2><h3 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> array</h3><br><h3 id="bitset" tabindex="-1"><a class="header-anchor" href="#bitset" aria-hidden="true">#</a> bitset</h3><br><h3 id="deque" tabindex="-1"><a class="header-anchor" href="#deque" aria-hidden="true">#</a> deque</h3><br><h3 id="forward-list" tabindex="-1"><a class="header-anchor" href="#forward-list" aria-hidden="true">#</a> forward_list</h3><br><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> list</h3><br><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h3><ol><li><p>初始化</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> m1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>插入</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>m1.insert(pair&lt;string, int&gt;(&quot;xxl&quot;, 150));
m1.insert(pair&lt;string, int&gt;(&quot;xxx&quot;, 125));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>m1.emplace(&quot;a&quot;, 10);
m1.emplace(&quot;b&quot;, 20);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>遍历</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>for (map&lt;string, int&gt;::iterator it = m1.begin(); it != m1.end(); it++) {
    cout &lt;&lt; it-&gt;first &lt;&lt; &quot;, &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><br><h3 id="queue" tabindex="-1"><a class="header-anchor" href="#queue" aria-hidden="true">#</a> queue</h3><ol><li><p>初始化</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>入队</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>q<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>出队</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取队头元素</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><br><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h3><ol><li>初始化</li></ol><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>插入</li></ol><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>遍历</li></ol><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="stack" tabindex="-1"><a class="header-anchor" href="#stack" aria-hidden="true">#</a> stack</h3><ol><li><p>初始化</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> stk<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> stk <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>入栈</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>弹栈</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取栈顶元素</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>判断栈是否为空</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>stk<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><br><h3 id="unordered-map" tabindex="-1"><a class="header-anchor" href="#unordered-map" aria-hidden="true">#</a> unordered_map</h3><br><h3 id="unordered-set" tabindex="-1"><a class="header-anchor" href="#unordered-set" aria-hidden="true">#</a> unordered_set</h3><br><h3 id="vector" tabindex="-1"><a class="header-anchor" href="#vector" aria-hidden="true">#</a> vector</h3><ol><li><p>初始化</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>vector&lt;int&gt; v;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>	<span class="token comment">// 创建一个大小为10的数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>	<span class="token comment">// 创建一个大小为10, 且全部元素初始化为 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>vector&lt;int&gt; v{ 1,2,3,4,5,6 };	// 设定元素
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>插入</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>遍历</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 使用 at() 函数来遍历, 可以判断是否越界</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>// 使用 [] 来遍历
for (int i = 0; i &lt; v.size(); i++) {
   cout &lt;&lt; v[i] &lt;&lt; endl;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>// 使用迭代器来遍历
for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {
   cout &lt;&lt; *it &lt;&lt; endl;
}

// 使用自动判断类型
for (auto it = v.begin(); it != v.end(); it++) {
   cout &lt;&lt; *it &lt;&lt; endl;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><br><h2 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h2><br><h2 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h2><br><h2 id="仿函数" tabindex="-1"><a class="header-anchor" href="#仿函数" aria-hidden="true">#</a> 仿函数</h2><h2 id="适配器-配接器" tabindex="-1"><a class="header-anchor" href="#适配器-配接器" aria-hidden="true">#</a> 适配器（配接器）</h2><br><h2 id="空间配置器" tabindex="-1"><a class="header-anchor" href="#空间配置器" aria-hidden="true">#</a> 空间配置器</h2><br><h1 id="线程、进程" tabindex="-1"><a class="header-anchor" href="#线程、进程" aria-hidden="true">#</a> 线程、进程</h1><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include &lt;thread&gt;

void func1(int i){
    std::cout  &lt;&lt; &quot;T1&quot; &lt;&lt; i &lt;&lt; std::endl;
}

void func2(){
    std::cout  &lt;&lt; &quot;T2&quot; &lt;&lt; std::endl;    
}

int main(){
    thread t1(func1, 100);
    thread t1(func2);    
    
    t1.join();
    t2.join();
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><h3 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程" aria-hidden="true">#</a> 多线程</h3><br><h3 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池" aria-hidden="true">#</a> 线程池</h3><br><h2 id="进程" tabindex="-1"><a class="header-anchor" href="#进程" aria-hidden="true">#</a> 进程</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><br><h3 id="进程的状态" tabindex="-1"><a class="header-anchor" href="#进程的状态" aria-hidden="true">#</a> 进程的状态</h3><br><h3 id="进程相关指令" tabindex="-1"><a class="header-anchor" href="#进程相关指令" aria-hidden="true">#</a> 进程相关指令</h3><br><h3 id="进程号相关函数" tabindex="-1"><a class="header-anchor" href="#进程号相关函数" aria-hidden="true">#</a> 进程号相关函数</h3><br><h3 id="进程创建" tabindex="-1"><a class="header-anchor" href="#进程创建" aria-hidden="true">#</a> 进程创建</h3><br><h3 id="exec-函数介绍" tabindex="-1"><a class="header-anchor" href="#exec-函数介绍" aria-hidden="true">#</a> exec 函数介绍</h3><br><h3 id="进程控制" tabindex="-1"><a class="header-anchor" href="#进程控制" aria-hidden="true">#</a> 进程控制</h3><br><h3 id="进程间通信" tabindex="-1"><a class="header-anchor" href="#进程间通信" aria-hidden="true">#</a> 进程间通信</h3><br><h3 id="多进程" tabindex="-1"><a class="header-anchor" href="#多进程" aria-hidden="true">#</a> 多进程</h3><br><h3 id="进程池" tabindex="-1"><a class="header-anchor" href="#进程池" aria-hidden="true">#</a> 进程池</h3><br><h1 id="静态库动态库" tabindex="-1"><a class="header-anchor" href="#静态库动态库" aria-hidden="true">#</a> 静态库动态库</h1><h2 id="什么是库" tabindex="-1"><a class="header-anchor" href="#什么是库" aria-hidden="true">#</a> 什么是库</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>库文件是计算机上的一类文件，可以简单的把库文件看成是一种代码仓库，它提供给使用者一些可以直接拿来用的变量、函数或类。</p><p>库是特殊的一种程序，编写库的程序和编写一般的程序区别不大，只是库不能单独运行。</p><p>库文件有两种，静态库和动态库（共享库），区别是：</p><ul><li>静态库在程序的链接阶段被复制到了程序中</li><li>动态库在链接阶段没有被复制到程序中，而是程序在运行时由系统动态加载到内存中供程序调用</li></ul><p>库的好处：1.代码保密 2.方便部署和分发</p></div><h2 id="静态库" tabindex="-1"><a class="header-anchor" href="#静态库" aria-hidden="true">#</a> 静态库</h2><h3 id="命名规则" tabindex="-1"><a class="header-anchor" href="#命名规则" aria-hidden="true">#</a> 命名规则</h3><ul><li><p>Linux</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>libxxx.a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>lib: 前缀（固定）</p><p>xxx: 库的名字（自定）</p><p>.a: 后缀（固定）</p><br></li><li><p>Windows</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>libxxx.lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br></li></ul><h3 id="静态库的制作" tabindex="-1"><a class="header-anchor" href="#静态库的制作" aria-hidden="true">#</a> 静态库的制作</h3><ol><li><p>gcc 获得 <code>.o</code> 文件</p></li><li><p>使用 <code>ar</code> 工具(archive)将 <code>.o</code> 文件打包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ar rcs libxxx.a xxx.o xxx.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>r: 将文件插入备存文件中</p><p>c: 建立备存文件</p><p>s: 索引</p></li></ol><br><h2 id="动态库" tabindex="-1"><a class="header-anchor" href="#动态库" aria-hidden="true">#</a> 动态库</h2><h3 id="命名规则-1" tabindex="-1"><a class="header-anchor" href="#命名规则-1" aria-hidden="true">#</a> 命名规则</h3><ul><li><p>Linux</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>libxxx.so
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>lib: 前缀（固定）</p><p>xxx: 库的名字（自定）</p><p>.so: 后缀（固定）</p><br></li><li><p>Windows</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>libxxx.dll
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br></li></ul><h3 id="动态库的制作" tabindex="-1"><a class="header-anchor" href="#动态库的制作" aria-hidden="true">#</a> 动态库的制作</h3><ol><li><p>gcc 获得 <code>.o</code> 文件，得到和位置无关的代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> <span class="token parameter variable">-fpic</span> a.c b.c

或

gcc <span class="token parameter variable">-c</span> <span class="token parameter variable">-fPIC</span> a.c b.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>gcc 得到动态库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-shared</span> a.o b.o <span class="token parameter variable">-o</span> libcalc.so
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>r: 将文件插入备存文件中</p><p>c: 建立备存文件</p><p>s: 索引</p></li></ol><br><h1 id="c-c-的编译链接" tabindex="-1"><a class="header-anchor" href="#c-c-的编译链接" aria-hidden="true">#</a> C/C++ 的编译链接</h1><h2 id="使用-msvc-编译代码" tabindex="-1"><a class="header-anchor" href="#使用-msvc-编译代码" aria-hidden="true">#</a> 使用 MSVC 编译代码</h2><p><img src="https://i.loli.net/2021/05/16/Oif58NbWYzoTjta.png" alt="image-20210516111054443" loading="lazy"></p><ol><li>打开适用于 vs2017 的 x64 本机工具命令提示</li><li>输入<code>cl + &quot;文件绝对路径&quot;</code> 或者 输入 g++ 文件名 -o 输出文件名</li><li>编译完成后，会生成可执行文件.exe，.obj是二进制代码</li><li>输入文件名即可运行</li></ol><br><h2 id="程序编译步骤" tabindex="-1"><a class="header-anchor" href="#程序编译步骤" aria-hidden="true">#</a> 程序编译步骤</h2><p><img src="https://img-blog.csdnimg.cn/3e1836f59d434800911d97dd089dd254.png" alt="image-20230508135245427" loading="lazy"></p><ol><li><p>预处理（Preprocessing）\`\`gcc -E *.c &gt; test.ii\` ，会把预处理的内容保存到txt</p><ol><li><strong>预处理指令执行（头文件引入）</strong></li><li><strong>宏展开</strong></li></ol></li><li><p><strong>预编译</strong> \`\`g++ -S test.ii\`, 会生成一个test.s文件，就是汇编代码</p><ol><li>编译（Compilation）</li><li>汇编（Assembly）\`\`g++ -c test.s\`,linux生成.o，windows生成.obj，把汇编转成二进制</li></ol></li><li><p><strong>编译</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> *.c //生成目标文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>链接（Linking）(多个文件链接成一个可执行文件)</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc main.o add.o sub.o <span class="token parameter variable">-o</span> demo.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sehll line-numbers-mode" data-ext="sehll"><pre class="language-sehll"><code>gcc *.o -o demo.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><br><h2 id="gcc、g" tabindex="-1"><a class="header-anchor" href="#gcc、g" aria-hidden="true">#</a> GCC、G++</h2><h3 id="gcc-常用参数选项" tabindex="-1"><a class="header-anchor" href="#gcc-常用参数选项" aria-hidden="true">#</a> GCC 常用参数选项</h3><table><thead><tr><th>GCC 编译选项</th><th>说明</th></tr></thead><tbody><tr><td>-E</td><td>预处理指定的源文件，不进行编译（宏替换、去掉注释）。生成 .i 文件</td></tr><tr><td>-S</td><td>编译指定的源文件，但是不进行汇编。生成 .s 文件</td></tr><tr><td>-c</td><td>编译、汇编指定的源文件，但是不进行链接。生成 .o 文件</td></tr><tr><td>-o</td><td></td></tr><tr><td>-I</td><td></td></tr><tr><td>-g</td><td></td></tr><tr><td>-D</td><td></td></tr><tr><td>-w</td><td></td></tr><tr><td>-Wall</td><td></td></tr><tr><td>-On</td><td></td></tr><tr><td>-l</td><td></td></tr><tr><td>-L</td><td></td></tr><tr><td>-fPIC/fpic</td><td></td></tr><tr><td>-shared</td><td></td></tr><tr><td>-std</td><td></td></tr></tbody></table><img src="https://i.loli.net/2021/09/03/8pxfOJXvlYhRGAB.png" style="zoom:80%;"><img src="https://i.loli.net/2021/09/03/Ew9AJFXHnrysC2B.png" style="zoom:80%;"><br><h3 id="g" tabindex="-1"><a class="header-anchor" href="#g" aria-hidden="true">#</a> G++</h3><img src="https://i.loli.net/2021/09/03/2whCzWcqjbpeL8F.png" alt="image-20210903144046985" style="zoom:67%;"><br><h3 id="多文件编译" tabindex="-1"><a class="header-anchor" href="#多文件编译" aria-hidden="true">#</a> 多文件编译</h3><p><img src="https://i.loli.net/2021/09/02/kzrKg7dXMDajPLv.png" alt="image-20210902134954496" loading="lazy"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> main.c     // 会生成一个.o文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> add.c     // 会生成一个.o文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> sub.c     // 会生成一个.o文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://i.loli.net/2021/09/02/VITJlEXeivUwdnk.png" alt="image-20210902135431636" loading="lazy"></p><p>链接：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc *.o <span class="token parameter variable">-o</span> demo
或者
gcc main.o add.o sub.o <span class="token parameter variable">-o</span> demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://i.loli.net/2021/09/02/XRYGbwTFAOc68fP.png" alt="image-20210902135740547" loading="lazy"></p><p>但是这样一个文件对应一行的编译，效率很慢，而且当文件有几十个或者几百个时会很复杂、繁琐</p><br><h2 id="makefile" tabindex="-1"><a class="header-anchor" href="#makefile" aria-hidden="true">#</a> Makefile</h2><ul><li>linux下C/C++编程makefile应用广泛</li><li>编译移植开源项目，大部分开源项目都基于 makefile,学会 makefile 才能够调试编译过程中的问题</li><li>手写 makefile 太过于繁琐，自动生成的 makefile 不易于配置，学习本门课程编写自动化 makefile,以后新项目只需要include makefile头文件</li></ul><br><h3 id="makefile-文件命名和规则" tabindex="-1"><a class="header-anchor" href="#makefile-文件命名和规则" aria-hidden="true">#</a> Makefile 文件命名和规则</h3><p>makefile 或 Makefile</p><br><h3 id="makefile-文件内容" tabindex="-1"><a class="header-anchor" href="#makefile-文件内容" aria-hidden="true">#</a> Makefile 文件内容</h3><ul><li>makefile文件主要包含了5部分内容： <ol><li>显式规则。说明了如何生成一个或多个目标文件。由makefile文件的创作者指出，包括要生成的文件、文件的依赖文件、生成的命令。</li><li>隐式规则。由于make有自动推导的功能，所以隐式的规则可以比较粗糙地简略书写makefile文件，这是由make所支持的。</li><li>变量定义。在makefile.文件中要定义一系列的变量，变量一般都是字符串，这与C语言中的宏有些类似。当makefile文件执行时，其中的变量都会扩展到相应的引用位置上。</li><li>文件指示。其包括3个部分，一个是在一个makefile文件中引用另一个makefile文件；另一个是指根据某些情况指定makefile文件中的有效部分；还有就是定义一个多行的命令。</li><li>注释。makefile.文件中只有行注释，其注释用“#&quot;字符。如果要在makefile文件中使用“#&quot;字符，可以用反斜框进行转义，如：“#”。</li></ol></li></ul><p>基本语法：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">目的</span><span class="token punctuation">:</span>依赖
	通过依赖生成目的的命令
	
<span class="token variable">$@</span> ：代表的是目的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> makefile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h4 id="编写" tabindex="-1"><a class="header-anchor" href="#编写" aria-hidden="true">#</a> 编写</h4><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">math.exe</span><span class="token punctuation">:</span> main.o add.o sub.o
	gcc main.o add.o sub.o -o demo.exe
<span class="token target symbol">main.o</span><span class="token punctuation">:</span>main.c
	gcc -c main.c -o main.o
<span class="token target symbol">add.o</span><span class="token punctuation">:</span>add.c
	gcc -c add.c -o add.o
<span class="token target symbol">sub.o</span><span class="token punctuation">:</span>sub.c
	gcc -c sub.c -o sub.o
<span class="token target symbol">clean</span><span class="token punctuation">:</span>
	rm -f *.o 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="开始编译" tabindex="-1"><a class="header-anchor" href="#开始编译" aria-hidden="true">#</a> 开始编译</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://i.loli.net/2021/09/02/rLuXQ15HKWsmjM9.png" alt="image-20210902140857513" loading="lazy"></p><p>删除.o文件<code>make clean</code></p><p><img src="https://i.loli.net/2021/09/02/JvCIzpmD3k6RayH.png" alt="image-20210902141408006" loading="lazy"></p><p>还有个优化：</p><p><code>&lt;</code> 会依次对应第一行写的.o文件，按照顺序进行编译</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">math.exe</span><span class="token punctuation">:</span> main.o add.o sub.o
	gcc *.o -o <span class="token variable">$@</span>
<span class="token target symbol">%.o</span><span class="token punctuation">:</span>%.c
	gcc -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span>
<span class="token target symbol">clean</span><span class="token punctuation">:</span>
	rm -f *.o 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://i.loli.net/2021/09/02/Et53eViyCmjFZpu.png" alt="image-20210902142542130" loading="lazy"></p><br><h2 id="makefile语法" tabindex="-1"><a class="header-anchor" href="#makefile语法" aria-hidden="true">#</a> makefile语法</h2><h4 id="变量-常见预定义变量" tabindex="-1"><a class="header-anchor" href="#变量-常见预定义变量" aria-hidden="true">#</a> 变量-常见 预定义变量</h4><p><img src="https://i.loli.net/2021/09/03/jy94dELFBiqUgXJ.png" alt="image-20210903144829164" loading="lazy"></p><p><img src="https://i.loli.net/2021/09/03/PlXgrJnUCY3wLxI.png" alt="image-20210903145007007" loading="lazy"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># first_make</span>
<span class="token comment"># $^ 表示依赖  不重复</span>
<span class="token comment"># $@ 表示目标</span>
<span class="token comment"># @ 加在命令的前面表示不在终端打印出具体的语句 -加个横杠表示该行命令执行错误后继续往下执行</span>
<span class="token comment"># 定义一个变量</span>
<span class="token assign-left variable">TARGET</span><span class="token operator">=</span>first_make
first_make:first_name.cpp
	<span class="token variable"><span class="token variable">$(</span>CXX<span class="token variable">)</span></span> $^ <span class="token parameter variable">-o</span> <span class="token variable">$@</span> <span class="token parameter variable">-lpthread</span>
<span class="token number">2</span>	
	
<span class="token assign-left variable">TARGET</span><span class="token operator">=</span>first_make  <span class="token comment"># 目标文件</span>
<span class="token variable"><span class="token variable">$(</span>TARGET<span class="token variable">)</span></span>:first_make.cpp xdata.cpp
	@<span class="token comment">#-@rm test</span>
	@echo <span class="token string">&quot;begin to build <span class="token variable"><span class="token variable">$(</span>TARGET<span class="token variable">)</span></span>&quot;</span>
	@<span class="token variable"><span class="token variable">$(</span>CXX<span class="token variable">)</span></span>:WQ
    $^ <span class="token parameter variable">-o</span> <span class="token variable">$@</span> <span class="token variable"><span class="token variable">$(</span>LIBS<span class="token variable">)</span></span>
	@echo <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>TARGET<span class="token variable">)</span></span> build success!&quot;</span>
	
	
<span class="token assign-left variable">TARGET</span><span class="token operator">=</span>first_make  <span class="token comment"># 目标文件</span>
<span class="token assign-left variable">LIBS</span><span class="token operator">=</span>-lpthread     <span class="token comment"># 包含的一些库</span>
<span class="token assign-left variable">OBJS</span><span class="token operator">=</span>first_make.o xdata.o <span class="token comment"># 生成的二进制文件</span>
<span class="token assign-left variable">CXXFLAGS</span><span class="token operator">=</span>-I./include      <span class="token comment"># 在C++包含的头文件所在位置</span>

<span class="token variable"><span class="token variable">$(</span>TARGET<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span>OBJS<span class="token variable">)</span></span>  <span class="token comment"># 这就是定义变量的好处</span>
	@<span class="token comment">#-@ rm test</span>
	@echo <span class="token string">&quot;begin to build <span class="token variable"><span class="token variable">$(</span>TARGET<span class="token variable">)</span></span>&quot;</span>
	@<span class="token variable"><span class="token variable">$(</span>CXX<span class="token variable">)</span></span> $^ <span class="token parameter variable">-o</span> <span class="token variable">$@</span> <span class="token variable"><span class="token variable">$(</span>LIBS<span class="token variable">)</span></span>
	@echo <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>TARGET<span class="token variable">)</span></span> build success!&quot;</span>
<span class="token comment"># 编译完成后，清理中间生成的文件   </span>
clean:
	<span class="token variable"><span class="token variable">$(</span>RM<span class="token variable">)</span></span> <span class="token variable"><span class="token variable">$(</span>OBJS<span class="token variable">)</span></span> <span class="token variable"><span class="token variable">$(</span>TARGET<span class="token variable">)</span></span>
.PHONY: clean *.clean

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要执行目标项，输入命令时要指定 <code>make clean</code></p><p>一般用来清理掉，重新编译</p><br><h2 id="gcc编译动态链接库" tabindex="-1"><a class="header-anchor" href="#gcc编译动态链接库" aria-hidden="true">#</a> GCC编译动态链接库</h2><p>所谓动态链接库，就是指在代码运行的过程中去加载的</p>`,165),f={href:"http://xn--5nqz7jm0rjtas67g.so",target:"_blank",rel:"noopener noreferrer"},y=a("li",null,[a("p",null,"而静态库会把所有的二进制代码都复制过去，因此静态库的文件会更大一些，文件后缀是.a")],-1),_=t(`<img src="https://i.loli.net/2021/09/03/dx84tPIv69oJ51g.png" alt="image-20210903175303415" style="zoom:50%;"><img src="https://i.loli.net/2021/09/03/B9PxMKd8f1TnjSq.png" alt="image-20210903175319685" style="zoom:50%;"><br><h3 id="静态库-1" tabindex="-1"><a class="header-anchor" href="#静态库-1" aria-hidden="true">#</a> 静态库</h3><img src="https://i.loli.net/2021/09/03/XM8Aof63inO4hVm.png" alt="image-20210903175411203" style="zoom:67%;"><br><h1 id="gdb" tabindex="-1"><a class="header-anchor" href="#gdb" aria-hidden="true">#</a> GDB</h1><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>GDB 是由</p></div><blockquote><p>注：表格里面的 <code>/</code> 表示或者</p></blockquote><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>启动和退出</td><td>gdb 可执行程序<br>quit/q</td></tr><tr><td>给程序设置参数/获取设置参数</td><td>set args 10 20 <br>show args</td></tr><tr><td>GDB 使用帮助</td><td>help</td></tr><tr><td>查看当前文件代码</td><td>List/l 从默认位置显示<br>list/l 行号 从指定的行显示<br>list/l 函数名 从指定的函数显示</td></tr><tr><td>设置显示的行数</td><td>show list/listsize<br>set list/listsize 行数</td></tr><tr><td>设置断点</td><td>b/break 行号<br>b/break 函数名<br>b/break 文件名:行号<br>b/break 文件名:函数</td></tr><tr><td>查看断点</td><td>i/info b/break</td></tr><tr><td>删除断点</td><td>d/del/delete 断点编号</td></tr><tr><td>设置断点无效</td><td>dis/disable 断点编号</td></tr><tr><td>设置断点生效</td><td>ena/enable 断点编号</td></tr><tr><td>设置条件断点（一般用在循环位置）</td><td>b/break 10 if i==5</td></tr><tr><td>运行 GDB 程序</td><td>start 程序停在第一行<br>run 遇到断点就停</td></tr><tr><td>继续运行，到下一个断点停</td><td>c/continue</td></tr><tr><td>向下执行一行代码（不进入函数体）</td><td>n/next</td></tr><tr><td>向下单步调试（进入函数体）</td><td>s/setp<br>finish（跳出函数体）</td></tr><tr><td>变量操作</td><td>p/print 变量名（打印变量值）<br>ptype 变量名 （打印变量类型）</td></tr><tr><td>自动变量操作</td><td>display 变量名（自动打印指定变量的值）<br>i/info display<br>undisplay</td></tr><tr><td>其它操作</td><td>set var 变量名=变量值（循环中用的较多）<br>until （跳出循环）</td></tr><tr><td></td><td></td></tr></tbody></table><p><br><br></p><h1 id="文件io" tabindex="-1"><a class="header-anchor" href="#文件io" aria-hidden="true">#</a> 文件IO</h1><h2 id="标准c库io函数" tabindex="-1"><a class="header-anchor" href="#标准c库io函数" aria-hidden="true">#</a> 标准C库IO函数</h2><p><img src="https://img-blog.csdnimg.cn/8d5cda3fe3f9473aa6da197375bb6e2c.png" alt="image-20230509101605460" loading="lazy"></p><br><h2 id="标准c库io和linux系统io的关系" tabindex="-1"><a class="header-anchor" href="#标准c库io和linux系统io的关系" aria-hidden="true">#</a> 标准C库IO和Linux系统IO的关系</h2><br><h2 id="虚拟地址空间" tabindex="-1"><a class="header-anchor" href="#虚拟地址空间" aria-hidden="true">#</a> 虚拟地址空间</h2><p><img src="https://img-blog.csdnimg.cn/1bb690ba57664891b4fc380ad96525e3.png" alt="image-20230509111129121" loading="lazy"></p><br><h2 id="文件描术符" tabindex="-1"><a class="header-anchor" href="#文件描术符" aria-hidden="true">#</a> 文件描术符</h2><p><img src="https://img-blog.csdnimg.cn/b6a0d56a123b4e44867e89203fcb4422.png" alt="image-20230509162243510" loading="lazy"></p><br><h2 id="linux系统io函数" tabindex="-1"><a class="header-anchor" href="#linux系统io函数" aria-hidden="true">#</a> Linux系统IO函数</h2><div class="hint-container info"><p class="hint-container-title">小技巧</p><p>使用 <code>man</code> 命令可查看手册，手册一共有8个章节。比如：</p><ol><li><p>查看 <code>ls</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">man</span> <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看第2章的 open 函数</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">man</span> <span class="token number">2</span> <span class="token function">open</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">off_t</span> <span class="token function">lseek</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">stat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>statbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">lstat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>statbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>stat 结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">stat</span><span class="token punctuation">{</span>
  <span class="token class-name">dev_t</span> st_dev<span class="token punctuation">;</span>			<span class="token comment">// </span>
  <span class="token class-name">ino_t</span> st_ino<span class="token punctuation">;</span>			<span class="token comment">// </span>
  <span class="token class-name">mode_t</span> st_mode<span class="token punctuation">;</span>		<span class="token comment">// </span>
  <span class="token class-name">nlink_t</span> st_nlink<span class="token punctuation">;</span>	<span class="token comment">// 连接</span>
  <span class="token class-name">uid_t</span> st_uid<span class="token punctuation">;</span>
  <span class="token class-name">gid_t</span> st_gid<span class="token punctuation">;</span>
  <span class="token class-name">dev_t</span> st_rdev<span class="token punctuation">;</span>
  <span class="token class-name">off_t</span> st_size<span class="token punctuation">;</span>
  <span class="token class-name">blksize_t</span> st_blksize<span class="token punctuation">;</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="文件属性操作函数" tabindex="-1"><a class="header-anchor" href="#文件属性操作函数" aria-hidden="true">#</a> 文件属性操作函数</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><br><h2 id="目录操作函数" tabindex="-1"><a class="header-anchor" href="#目录操作函数" aria-hidden="true">#</a> 目录操作函数</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">rename</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>oldpath<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>newpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="目录遍历函数" tabindex="-1"><a class="header-anchor" href="#目录遍历函数" aria-hidden="true">#</a> 目录遍历函数</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>DIR <span class="token operator">*</span><span class="token function">opendir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">dirent</span> <span class="token operator">*</span><span class="token function">readdir</span><span class="token punctuation">(</span>DIR<span class="token punctuation">,</span> <span class="token operator">*</span>dirp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">closedir</span><span class="token punctuation">(</span>DIR<span class="token punctuation">,</span> <span class="token operator">*</span>dirp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="dirent-结构体和-d-type" tabindex="-1"><a class="header-anchor" href="#dirent-结构体和-d-type" aria-hidden="true">#</a> dirent 结构体和 d_type</h2><br><h2 id="dup、dup2-函数" tabindex="-1"><a class="header-anchor" href="#dup、dup2-函数" aria-hidden="true">#</a> dup、dup2 函数</h2><br><h2 id="fcntl-函数" tabindex="-1"><a class="header-anchor" href="#fcntl-函数" aria-hidden="true">#</a> fcntl 函数</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 复制文件描述符、设置/获取文件的状态标志</span>
<span class="token keyword">int</span> <span class="token function">fcntl</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">/* arg */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br>`,56);function w(q,C){const l=d("ExternalLinkIcon"),e=d("font");return r(),p("div",null,[u,v,a("p",null,[n("参考："),a("a",h,[n("https://mp.weixin.qq.com/s/eFFc74OpA1ca2LlCB94Siw"),s(l)])]),b,a("p",null,[a("a",m,[n("Github 主页"),s(l)])]),k,a("ul",null,[a("li",null,[s(e,{color:"#629eb6"},{default:i(()=>[n("第一个元素游标存放的是备用链表的下标，第一个元素和最后一个元素不存放数据")]),_:1})]),a("li",null,[s(e,{color:"#629eb6"},{default:i(()=>[n("数组的最后一位游标的设置为：第一位有数据的下标，下面表格的就是下标为1的才有数据")]),_:1})]),a("li",null,[s(e,{color:"#629eb6"},{default:i(()=>[n("每一个元素的游标指向下一个元素的下标")]),_:1})])]),g,a("ol",null,[a("li",null,[s(e,{color:"#6c96ca"},{default:i(()=>[n("找到没有数据的备用链表开头(获得空闲分量的下标)，下面的是5")]),_:1})]),a("li",null,[s(e,{color:"#6c96ca"},{default:i(()=>[n("让A的游标指向B的游标，也就是5")]),_:1})]),a("li",null,[s(e,{color:"#6c96ca"},{default:i(()=>[n("最后让B的游标指向C的游标，也就是3")]),_:1})])]),x,a("ul",null,[a("li",null,[a("p",null,[n("动态库只会把动态库函数的地址复制过来，"),a("a",f,[n("文件后缀是.so"),s(l)])])]),y]),_])}const T=c(o,[["render",w],["__file","C:C__.html.vue"]]);export{T as default};

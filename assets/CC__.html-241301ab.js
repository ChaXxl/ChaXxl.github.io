const e=JSON.parse('{"key":"v-60a78790","path":"/docs/Interview/CC__.html","title":"CC++ 八股","lang":"zh-CN","frontmatter":{"description":"一. C++ 基础 1.1 C++ 三大待性 1.1.1 访问权限 C++ 通过 public、protected、private 三个关键字来控制成员变量和成员函数的访问权限，它们分别表示公有的、受保护的、私有的，被称为成员访问限定符。 1.1.2 封装 1.1.3 继承 1.1.4 多态 多态实现原理 1.1.5 递归如何避免爆栈 1.2数据类型 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/docs/Interview/CC__.html"}],["meta",{"property":"og:title","content":"CC++ 八股"}],["meta",{"property":"og:description","content":"一. C++ 基础 1.1 C++ 三大待性 1.1.1 访问权限 C++ 通过 public、protected、private 三个关键字来控制成员变量和成员函数的访问权限，它们分别表示公有的、受保护的、私有的，被称为成员访问限定符。 1.1.2 封装 1.1.3 继承 1.1.4 多态 多态实现原理 1.1.5 递归如何避免爆栈 1.2数据类型 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"ChaChaL"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CC++ 八股\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChaChaL\\"}]}"]]},"headers":[{"level":2,"title":"一. C++ 基础","slug":"一-c-基础","link":"#一-c-基础","children":[{"level":3,"title":"1.1 C++ 三大待性","slug":"_1-1-c-三大待性","link":"#_1-1-c-三大待性","children":[]},{"level":3,"title":"1.2数据类型","slug":"_1-2数据类型","link":"#_1-2数据类型","children":[]},{"level":3,"title":"1.3 指针和引用","slug":"_1-3-指针和引用","link":"#_1-3-指针和引用","children":[]},{"level":3,"title":"1.4 关键字","slug":"_1-4-关键字","link":"#_1-4-关键字","children":[]},{"level":3,"title":"1.5 C++ 强制类型转换","slug":"_1-5-c-强制类型转换","link":"#_1-5-c-强制类型转换","children":[]},{"level":3,"title":"1.6 运算符重载","slug":"_1-6-运算符重载","link":"#_1-6-运算符重载","children":[]},{"level":3,"title":"1.7 C++ 内存模型","slug":"_1-7-c-内存模型","link":"#_1-7-c-内存模型","children":[]},{"level":3,"title":"1.8 计算机中的乱序执行","slug":"_1-8-计算机中的乱序执行","link":"#_1-8-计算机中的乱序执行","children":[]}]},{"level":2,"title":"二. C++ STL","slug":"二-c-stl","link":"#二-c-stl","children":[{"level":3,"title":"2.1 STL实现原理及其实现","slug":"_2-1-stl实现原理及其实现","link":"#_2-1-stl实现原理及其实现","children":[]},{"level":3,"title":"2.2 pair 容器","slug":"_2-2-pair-容器","link":"#_2-2-pair-容器","children":[]},{"level":3,"title":"2.3 vector 容器实现与扩充","slug":"_2-3-vector-容器实现与扩充","link":"#_2-3-vector-容器实现与扩充","children":[]},{"level":3,"title":"2.4 list","slug":"_2-4-list","link":"#_2-4-list","children":[]},{"level":3,"title":"2.5 deque","slug":"_2-5-deque","link":"#_2-5-deque","children":[]},{"level":3,"title":"2.6 stack && queue","slug":"_2-6-stack-queue","link":"#_2-6-stack-queue","children":[]},{"level":3,"title":"2.7 heap && priority_queue","slug":"_2-7-heap-priority-queue","link":"#_2-7-heap-priority-queue","children":[]},{"level":3,"title":"2.8 map && set","slug":"_2-8-map-set","link":"#_2-8-map-set","children":[]},{"level":3,"title":"2.9 map && unordered_map","slug":"_2-9-map-unordered-map","link":"#_2-9-map-unordered-map","children":[]},{"level":3,"title":"2.10 sort 为什么可以避免爆栈","slug":"_2-10-sort-为什么可以避免爆栈","link":"#_2-10-sort-为什么可以避免爆栈","children":[]}]},{"level":2,"title":"三. C++泛型编程","slug":"三-c-泛型编程","link":"#三-c-泛型编程","children":[]},{"level":2,"title":"四. C++ 新特性","slug":"四-c-新特性","link":"#四-c-新特性","children":[{"level":3,"title":"4.1 智能指针","slug":"_4-1-智能指针","link":"#_4-1-智能指针","children":[]},{"level":3,"title":"4.2 类型推导","slug":"_4-2-类型推导","link":"#_4-2-类型推导","children":[]},{"level":3,"title":"4.3 右值引用","slug":"_4-3-右值引用","link":"#_4-3-右值引用","children":[]},{"level":3,"title":"4.4 nullptr","slug":"_4-4-nullptr","link":"#_4-4-nullptr","children":[]},{"level":3,"title":"4.5 范围 for 循环","slug":"_4-5-范围-for-循环","link":"#_4-5-范围-for-循环","children":[]},{"level":3,"title":"4.6 列表初始化","slug":"_4-6-列表初始化","link":"#_4-6-列表初始化","children":[]},{"level":3,"title":"4.7 lambda 表达式","slug":"_4-7-lambda-表达式","link":"#_4-7-lambda-表达式","children":[]},{"level":3,"title":"4.8 并发","slug":"_4-8-并发","link":"#_4-8-并发","children":[]}]},{"level":2,"title":"五. Effective STL","slug":"五-effective-stl","link":"#五-effective-stl","children":[]},{"level":2,"title":"六. Effective C++","slug":"六-effective-c","link":"#六-effective-c","children":[]}],"git":{},"readingTime":{"minutes":3.25,"words":975},"filePathRelative":"docs/Interview/CC++.md","autoDesc":true}');export{e as data};
